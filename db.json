{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"source/img/xcode-fixme.png","path":"img/xcode-fixme.png","modified":false},{"_id":"source/img/xcode-mark.png","path":"img/xcode-mark.png","modified":false},{"_id":"source/img/xcode-todo.png","path":"img/xcode-todo.png","modified":false},{"_id":"source/img/asyncdisplaykit-logo.png","path":"img/asyncdisplaykit-logo.png","modified":false},{"_id":"source/img/asyncdisplaykit-node.png","path":"img/asyncdisplaykit-node.png","modified":false},{"_id":"source/img/viper-wireframe.png","path":"img/viper-wireframe.png","modified":false},{"_id":"source/img/init-coder.png","path":"img/init-coder.png","modified":false},{"_id":"source/img/chart-1.png","path":"img/chart-1.png","modified":false},{"_id":"source/img/chart-2.png","path":"img/chart-2.png","modified":false},{"_id":"source/img/chart-3.png","path":"img/chart-3.png","modified":false},{"_id":"source/img/chart-4.jpg","path":"img/chart-4.jpg","modified":false},{"_id":"source/img/jack-layers1.png","path":"img/jack-layers1.png","modified":false},{"_id":"source/img/jack.png","path":"img/jack.png","modified":false},{"_id":"source/img/chart-5.png","path":"img/chart-5.png","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1411612893000},{"_id":"scaffolds/page.md","mtime":1411612893000},{"_id":"scaffolds/photo.md","mtime":1411612893000},{"_id":"scaffolds/post.md","mtime":1411612893000},{"_id":"themes/landscape/Gruntfile.js","mtime":1411612893000},{"_id":"themes/landscape/LICENSE","mtime":1411612893000},{"_id":"themes/landscape/README.md","mtime":1411612893000},{"_id":"themes/landscape/_config.yml","mtime":1411612893000},{"_id":"themes/landscape/package.json","mtime":1411612893000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1411612893000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/category.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/index.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/page.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/post.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1411612893000},{"_id":"themes/landscape/source/js/script.js","mtime":1411612893000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/style.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1411612893000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1411612893000},{"_id":"source/_posts/first-blog.md","mtime":1411612893000},{"_id":"source/img/xcode-fixme.png","mtime":1411612893000},{"_id":"source/img/xcode-mark.png","mtime":1411612893000},{"_id":"source/img/xcode-todo.png","mtime":1411612893000},{"_id":"source/_posts/swift-mark.md","mtime":1411612893000},{"_id":"source/_posts/swift-rac.md","mtime":1411901725000},{"_id":"source/_posts/swift-rac2.md","mtime":1413119353000},{"_id":"source/_posts/asyncdisplaykit.md","mtime":1413741225000},{"_id":"source/img/asyncdisplaykit-logo.png","mtime":1413739761000},{"_id":"source/img/asyncdisplaykit-node.png","mtime":1413741174000},{"_id":"source/_posts/asyncdisplaykit2.md","mtime":1414341603000},{"_id":"source/_posts/use-mantle.md","mtime":1414969886000},{"_id":"source/_posts/SwiftJson.md","mtime":1415571502000},{"_id":"source/_posts/language-and-mind.md","mtime":1416138385000},{"_id":"source/_posts/viper.md","mtime":1416763069000},{"_id":"source/img/viper-wireframe.png","mtime":1416762859000},{"_id":"source/_posts/today-extension.md","mtime":1417358274000},{"_id":"source/_posts/iOSCon.md","mtime":1417951807000},{"_id":"source/_posts/EffectiveSwift.md","mtime":1418568585000},{"_id":"source/_posts/data-parsing-performance.md","mtime":1419170998000},{"_id":"source/img/init-coder.png","mtime":1419778215000},{"_id":"source/_posts/swift-init.md","mtime":1419779218000},{"_id":"source/_posts/2014.md","mtime":1420983997000},{"_id":"source/_posts/chart-1.md","mtime":1422193423000},{"_id":"source/img/chart-1.png","mtime":1422191098000},{"_id":"source/img/chart-2.png","mtime":1422191139000},{"_id":"source/img/chart-3.png","mtime":1422191170000},{"_id":"source/img/chart-4.jpg","mtime":1420451064000},{"_id":"source/img/jack-layers1.png","mtime":1330538536000},{"_id":"source/img/jack.png","mtime":1330581272000},{"_id":"source/_posts/chart-2.md","mtime":1422797034000},{"_id":"source/_posts/chart-3.md","mtime":1423393926000},{"_id":"source/img/chart-5.png","mtime":1423392852000},{"_id":"source/_posts/BHAPI-Desgin-01.md","mtime":1425823815000},{"_id":"source/_posts/BHAPI-Design-02.md","mtime":1426435096000},{"_id":"source/_posts/rac-operations-1.md","mtime":1427633693000},{"_id":"source/_posts/classy-intro.md","mtime":1430049330000},{"_id":"source/_posts/study-ruby.md","mtime":1430662279000}],"Category":[],"Page":[],"Post":[{"title":"开写博客了","date":1411239247000,"tags":[],"content":"<p>如题。</p>\n","source":"_posts/first-blog.md","raw":"title: 开写博客了\ndate: 2014-09-21 02:54:07\ntags:\n---\n\n如题。\n\n","slug":"first-blog","updated":1411612893000,"excerpt":"","_id":"j4qas4awtztmfan9","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Swift 中的标记","date":1411320430000,"tags":["v2ios7x8x4gpxzbc"],"content":"<p>在 Objective-C 中 我们使用 #pragma mark 来分割代码，并且使IDE支持跳转</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#pragma mark – Initialization </span></div><div class=\"line\">code <span class=\"keyword\">here</span>...</div><div class=\"line\"> </div><div class=\"line\"><span class=\"preprocessor\">#pragma mark – Table Management</span></div><div class=\"line\">more code <span class=\"keyword\">here</span>...</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/xcode-mark.png\" alt=\"xcode-mark\"></p>\n<p>那么在 Swift 中我们如何实现类似的效果呢？<br>答案是 // MARK: 这个 XCode6 新引入的特性</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// MARK: - Initialization</span></div><div class=\"line\">code here...</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// MARK: - View Management</span></div><div class=\"line\">more code here...</div></pre></td></tr></table></figure>\n\n<p>在 Swift 中我们同样也可以使用 // TODO: 以及 // FIXME:</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"func\"><span class=\"keyword\">func</span></span> viewDidLoad()</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">super</span>.viewDidLoad()</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// TODO: add configuration code</span></div><div class=\"line\">  <span class=\"keyword\">self</span>.configureView()</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/xcode-todo.png\" alt=\"xcode-todo\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"comment\">// FIXME: bug 2102</span></div><div class=\"line\">  <span class=\"keyword\">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class=\"string\">\"Cell\"</span>, forIndexPath: indexPath) <span class=\"keyword\">as</span> UITableViewCell</div><div class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">object</span> = objects[indexPath.row] <span class=\"keyword\">as</span> NSDate</div><div class=\"line\">  cell.textLabel.text = <span class=\"keyword\">object</span>.description</div><div class=\"line\">  <span class=\"keyword\">return</span> cell</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/xcode-fixme.png\" alt=\"xcode-fixme\"></p>\n","source":"_posts/swift-mark.md","raw":"title: Swift 中的标记\ndate: 2014-09-22 01:27:10\ntags: XCode\n---\n\n在 Objective-C 中 我们使用 #pragma mark 来分割代码，并且使IDE支持跳转\n\n```Objective-C\n#pragma mark – Initialization \ncode here...\n \n#pragma mark – Table Management\nmore code here...\n```\n\n![xcode-mark](/img/xcode-mark.png)\n\n那么在 Swift 中我们如何实现类似的效果呢？\n答案是 // MARK: 这个 XCode6 新引入的特性\n\n```Swift\n// MARK: - Initialization\ncode here...\n \n// MARK: - View Management\nmore code here...\n\n```\n\n在 Swift 中我们同样也可以使用 // TODO: 以及 // FIXME:\n\n```Swift\noverride func viewDidLoad()\n{\n  super.viewDidLoad()\n \n  // TODO: add configuration code\n  self.configureView()\n}\n```\n\n![xcode-todo](/img/xcode-todo.png)\n\n```\noverride func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell\n{\n  // FIXME: bug 2102\n  let cell = tableView.dequeueReusableCellWithIdentifier(\"Cell\", forIndexPath: indexPath) as UITableViewCell\n  let object = objects[indexPath.row] as NSDate\n  cell.textLabel.text = object.description\n  return cell\n}\n```\n\n![xcode-fixme](/img/xcode-fixme.png)","slug":"swift-mark","updated":1411612893000,"excerpt":"","_id":"ntaoe33ezgsp7tfd","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"在 Swift 项目中集成 ReactiveCocoa (一)","date":1411898847000,"tags":["tvrd3hprvc2vvx4b"],"content":"<h2 id=\"安装_ReactiveCocoa\">安装 ReactiveCocoa</h2>\n<p>最简单的就是使用 Cocoapods 了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">pod</span> <span class=\"string\">'ReactiveCocoa'</span></div></pre></td></tr></table></figure>\n\n<p>但是由于 ReactiveCocoa 目前尚未对 Swift 做原生支持，所以我们需要使用桥接的模式来使用。把 #import <reactivecocoa reactivecocoa.h=\"\"> 放入 Briging Header。然后我们就可以开心的使用啦。</reactivecocoa></p>\n<h2 id=\"Sequence\">Sequence</h2>\n<p>ReactiveCocoa 对 ObjC 容器类提供了 Sequence 扩展。如下</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">RACSignal *letters = [<span class=\"string\">@\"A B C D E F G H I\"</span> componentsSeparatedByString:<span class=\"string\">@\" \"</span>]<span class=\"variable\">.rac_sequence</span><span class=\"variable\">.signal</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 依次输出 A B C D…</span></div><div class=\"line\">[letters subscribeNext:^(<span class=\"built_in\">NSString</span> *x) {</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, x);</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p>但是到了 Swift 世界，Array 和 NSArray 就分道扬镳了，虽然可以相互转换，但是 NSArray 的扩展，Array 是不能用的，所以就有了下面的代码</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> signal = <span class=\"type\">NSArray</span>(array: <span class=\"string\">\"A B C D\"</span>.componentsSeparatedByString(<span class=\"string\">\" \"</span>)).rac_sequence.signal()</div><div class=\"line\">signal.subscribeNext { (a) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"built_in\">println</span>(a)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"Signals\">Signals</h2>\n<p>由于 Signal 在 OC 中一直返回的是 id 类型，如下</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.signal</span> subscribeNext:^(<span class=\"keyword\">id</span> x) {</div><div class=\"line\">  <span class=\"built_in\">NSString</span> *text = (<span class=\"built_in\">NSString</span> *)x;</div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(text);</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p>id 类型在 OC 中可谓是万能类型，可以随意的转换和发消息。<br>但是 Swift 号称类型安全，就不能这样了，要实现上面的代码，在 Swift 中可能是这样的</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">self</span>.signal.subscribeNext {</div><div class=\"line\">  (next:<span class=\"type\">AnyObject</span>!) -&gt; () <span class=\"keyword\">in</span></div><div class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text = next <span class=\"keyword\">as</span>? <span class=\"type\">String</span> {</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"built_in\">countElements</span>(text))</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>但我们的武器箱里又多了一把武器，泛型。</p>\n<p>通过泛型，我们实现一个 RACSignal 的扩展，让其支持任意类型的转换。</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">RACSignal</span> </span>{  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> subscribeNextAs&lt;<span class=\"type\">T</span>&gt;(nextClosure:(<span class=\"type\">T</span>) -&gt; ()) -&gt; () {</div><div class=\"line\">    <span class=\"keyword\">self</span>.subscribeNext {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; () <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      nextClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>使用 subscribeNextAs 我们甚至可以写出比 OC 更好的代码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">self</span><span class=\"class\">.signal</span><span class=\"class\">.subscribeNextAs</span> <span class=\"rules\">{</span></div><div class=\"line\">  <span class=\"rule\">(<span class=\"attribute\">text</span>:<span class=\"value\">String) -&gt; () in</span></span></div><div class=\"line\">  <span class=\"function\">println</span>(<span class=\"function\">countElements</span>(text))</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>今天到这里，未完待续…</p>\n","source":"_posts/swift-rac.md","raw":"title: 在 Swift 项目中集成 ReactiveCocoa (一)\ndate: 2014-09-28 18:07:27\ntags: Swift ReactiveCocoa\n\n---\n\n## 安装 ReactiveCocoa \n\n最简单的就是使用 Cocoapods 了。\n\n```\npod 'ReactiveCocoa'\n```\n\n但是由于 ReactiveCocoa 目前尚未对 Swift 做原生支持，所以我们需要使用桥接的模式来使用。把 #import <ReactiveCocoa/ReactiveCocoa.h> 放入 Briging Header。然后我们就可以开心的使用啦。\n\n## Sequence\n\nReactiveCocoa 对 ObjC 容器类提供了 Sequence 扩展。如下\n\n```Objective-C\nRACSignal *letters = [@\"A B C D E F G H I\" componentsSeparatedByString:@\" \"].rac_sequence.signal;\n\n// 依次输出 A B C D…\n[letters subscribeNext:^(NSString *x) {\n    NSLog(@\"%@\", x);\n}];\n```\n\n但是到了 Swift 世界，Array 和 NSArray 就分道扬镳了，虽然可以相互转换，但是 NSArray 的扩展，Array 是不能用的，所以就有了下面的代码\n\n```Swift\n    var signal = NSArray(array: \"A B C D\".componentsSeparatedByString(\" \")).rac_sequence.signal()\n    signal.subscribeNext { (a) -> Void in\n        println(a)\n    }\n```\n\n## Signals\n\n由于 Signal 在 OC 中一直返回的是 id 类型，如下\n\n```Objective-C\n[self.signal subscribeNext:^(id x) {\n  NSString *text = (NSString *)x;\n  NSLog(text);\n}];\n```\n\nid 类型在 OC 中可谓是万能类型，可以随意的转换和发消息。\n但是 Swift 号称类型安全，就不能这样了，要实现上面的代码，在 Swift 中可能是这样的\n\n```Swift\n\nself.signal.subscribeNext {\n  (next:AnyObject!) -> () in\n  if let text = next as? String {\n    println(countElements(text))\n  }\n}\n\n```\n\n但我们的武器箱里又多了一把武器，泛型。\n\n通过泛型，我们实现一个 RACSignal 的扩展，让其支持任意类型的转换。\n\n```Swift\nextension RACSignal {  \n  func subscribeNextAs<T>(nextClosure:(T) -> ()) -> () {\n    self.subscribeNext {\n      (next: AnyObject!) -> () in\n      let nextAsT = next as T\n      nextClosure(nextAsT)\n    }\n  }\n}\n```\n\n使用 subscribeNextAs 我们甚至可以写出比 OC 更好的代码\n\n```\nself.signal.subscribeNextAs {\n  (text:String) -> () in\n  println(countElements(text))\n}\n```\n\n今天到这里，未完待续...\n\n\n\n\n\n\n\n\n\n","slug":"swift-rac","updated":1411901725000,"excerpt":"","_id":"vu1tzjzy4kk5aus8","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"在 Swift 项目中集成 ReactiveCocoa (二)","date":1413117534000,"tags":[],"content":"<h2 id=\"Signals\">Signals</h2>\n<p>当然，类似于 subscribeNextAs，其它一些操作的 Swift 版本</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">RACSignal</span> </span>{</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> mapAs&lt;<span class=\"type\">T</span>: <span class=\"type\">AnyObject</span>, <span class=\"type\">U</span>: <span class=\"type\">AnyObject</span>&gt;(mapClosure:(<span class=\"type\">T</span>) -&gt; <span class=\"type\">U</span>) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.<span class=\"built_in\">map</span> {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; <span class=\"type\">AnyObject</span>! <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      <span class=\"keyword\">return</span> mapClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> filterAs&lt;<span class=\"type\">T</span>: <span class=\"type\">AnyObject</span>&gt;(filterClosure:(<span class=\"type\">T</span>) -&gt; <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.<span class=\"built_in\">filter</span> {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      <span class=\"keyword\">return</span> filterClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> doNextAs&lt;<span class=\"type\">T</span>: <span class=\"type\">AnyObject</span>&gt;(nextClosure:(<span class=\"type\">T</span>) -&gt; ()) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.doNext {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; () <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      nextClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>Signal 之间可以联动，如下 </p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RAC(<span class=\"keyword\">self</span><span class=\"variable\">.submitButton</span><span class=\"variable\">.enabled</span>) = [RACSignal combineLatest:@[<span class=\"keyword\">self</span><span class=\"variable\">.usernameField</span><span class=\"variable\">.rac_textSignal</span>, <span class=\"keyword\">self</span><span class=\"variable\">.passwordField</span><span class=\"variable\">.rac_textSignal</span>] reduce:^<span class=\"keyword\">id</span>(<span class=\"built_in\">NSString</span> *userName, <span class=\"built_in\">NSString</span> *password) {</div><div class=\"line\">    <span class=\"keyword\">return</span> @(userName<span class=\"variable\">.length</span> &gt;= <span class=\"number\">6</span> && password<span class=\"variable\">.length</span> &gt;= <span class=\"number\">6</span>);</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p>但是 Swift 中不能使用复杂的宏，所以需要把宏转换为一个结构体</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RAC</span>  </span>{</div><div class=\"line\">  <span class=\"keyword\">var</span> target : <span class=\"type\">NSObject</span>!</div><div class=\"line\">  <span class=\"keyword\">var</span> keyPath : <span class=\"type\">String</span>!</div><div class=\"line\">  <span class=\"keyword\">var</span> nilValue : <span class=\"type\">AnyObject</span>!</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"number\">_</span> target: <span class=\"type\">NSObject</span>!, <span class=\"number\">_</span> keyPath: <span class=\"type\">String</span>, nilValue: <span class=\"type\">AnyObject</span>? = <span class=\"built_in\">nil</span>) {</div><div class=\"line\">    <span class=\"keyword\">self</span>.target = target</div><div class=\"line\">    <span class=\"keyword\">self</span>.keyPath = keyPath</div><div class=\"line\">    <span class=\"keyword\">self</span>.nilValue = nilValue</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> assignSignal(signal : <span class=\"type\">RACSignal</span>) {</div><div class=\"line\">    signal.setKeyPath(<span class=\"keyword\">self</span>.keyPath, onObject: <span class=\"keyword\">self</span>.target, nilValue: <span class=\"keyword\">self</span>.nilValue)</div><div class=\"line\">  }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> ~&gt; {}</div><div class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span></span> ~&gt; (signal: <span class=\"type\">RACSignal</span>, rac: <span class=\"type\">RAC</span>) {</div><div class=\"line\">  rac.assignSignal(signal)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这样我们就可以很容易写出 Swift 的 RAC 版本</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">searchTextField.rac_textSignal() ~&gt; <span class=\"type\">RAC</span>(viewModel, <span class=\"string\">\"searchText\"</span>)</div></pre></td></tr></table></figure>\n\n<p>Combining latest values</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RACSignalEx</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">class</span> <span class=\"func\"><span class=\"keyword\">func</span></span> combineLatestAs&lt;<span class=\"type\">T</span>, <span class=\"type\">U</span>, <span class=\"type\">R</span>: <span class=\"type\">AnyObject</span>&gt;(signals:[<span class=\"type\">RACSignal</span>], <span class=\"built_in\">reduce</span>:(<span class=\"type\">T</span>,<span class=\"type\">U</span>) -&gt; <span class=\"type\">R</span>) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">RACSignal</span>.combineLatest(signals).mapAs {</div><div class=\"line\">      (tuple: <span class=\"type\">RACTuple</span>) -&gt; <span class=\"type\">R</span> <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">reduce</span>(tuple.first <span class=\"keyword\">as</span> <span class=\"type\">T</span>, tuple.second <span class=\"keyword\">as</span> <span class=\"type\">U</span>)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">RACSignalEx</span>.combineLatestAs([favouritesSignal, commentsSignal]) {</div><div class=\"line\">      (favourites:<span class=\"type\">NSString</span>, comments:<span class=\"type\">NSString</span>) -&gt; <span class=\"type\">FlickrPhotoMetadata</span> <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">FlickrPhotoMetadata</span>(favourites: favourites.integerValue, comments: comments.integerValue)</div><div class=\"line\">    }</div></pre></td></tr></table></figure>\n\n<p>RACObserve 监听属性的改变，使用block的KVO</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span></span> <span class=\"type\">RACObserve</span>(target: <span class=\"type\">NSObject</span>!, keyPath: <span class=\"type\">String</span>) -&gt; <span class=\"type\">RACSignal</span>  {</div><div class=\"line\">  <span class=\"keyword\">return</span> target.rac_valuesForKeyPath(keyPath, observer: target)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> validSearchSignal = <span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>, <span class=\"string\">\"searchText\"</span>).mapAs {</div><div class=\"line\">    (text: <span class=\"type\">NSString</span>) -&gt; <span class=\"type\">NSNumber</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">return</span> text.length &gt; <span class=\"number\">3</span></div><div class=\"line\">  }.distinctUntilChanged();</div></pre></td></tr></table></figure>\n\n","source":"_posts/swift-rac2.md","raw":"title: 在 Swift 项目中集成 ReactiveCocoa (二)\ndate: 2014-10-12 20:38:54\ntags:\n---\n\n## Signals\n\n当然，类似于 subscribeNextAs，其它一些操作的 Swift 版本\n\n```Swift\nextension RACSignal {\n  \n  func mapAs<T: AnyObject, U: AnyObject>(mapClosure:(T) -> U) -> RACSignal {\n    return self.map {\n      (next: AnyObject!) -> AnyObject! in\n      let nextAsT = next as T\n      return mapClosure(nextAsT)\n    }\n  }\n  \n  func filterAs<T: AnyObject>(filterClosure:(T) -> Bool) -> RACSignal {\n    return self.filter {\n      (next: AnyObject!) -> Bool in\n      let nextAsT = next as T\n      return filterClosure(nextAsT)\n    }\n  }\n  \n  func doNextAs<T: AnyObject>(nextClosure:(T) -> ()) -> RACSignal {\n    return self.doNext {\n      (next: AnyObject!) -> () in\n      let nextAsT = next as T\n      nextClosure(nextAsT)\n    }\n  }\n}\n```\n\nSignal 之间可以联动，如下 \n\n```Objective-C\nRAC(self.submitButton.enabled) = [RACSignal combineLatest:@[self.usernameField.rac_textSignal, self.passwordField.rac_textSignal] reduce:^id(NSString *userName, NSString *password) {\n    return @(userName.length >= 6 && password.length >= 6);\n}];\n```\n\n但是 Swift 中不能使用复杂的宏，所以需要把宏转换为一个结构体\n\n```Swift\nstruct RAC  {\n  var target : NSObject!\n  var keyPath : String!\n  var nilValue : AnyObject!\n  \n  init(_ target: NSObject!, _ keyPath: String, nilValue: AnyObject? = nil) {\n    self.target = target\n    self.keyPath = keyPath\n    self.nilValue = nilValue\n  }\n  \n  \n  func assignSignal(signal : RACSignal) {\n    signal.setKeyPath(self.keyPath, onObject: self.target, nilValue: self.nilValue)\n  }\n}\n\ninfix operator ~> {}\nfunc ~> (signal: RACSignal, rac: RAC) {\n  rac.assignSignal(signal)\n}\n```\n\n这样我们就可以很容易写出 Swift 的 RAC 版本\n\n```Swift\nsearchTextField.rac_textSignal() ~> RAC(viewModel, \"searchText\")\n```\n\nCombining latest values\n\n```Swift\nclass RACSignalEx {\n  class func combineLatestAs<T, U, R: AnyObject>(signals:[RACSignal], reduce:(T,U) -> R) -> RACSignal {\n    return RACSignal.combineLatest(signals).mapAs {\n      (tuple: RACTuple) -> R in\n      return reduce(tuple.first as T, tuple.second as U)\n    }\n  }\n}\n```\n\n```Swift\nRACSignalEx.combineLatestAs([favouritesSignal, commentsSignal]) {\n      (favourites:NSString, comments:NSString) -> FlickrPhotoMetadata in\n      return FlickrPhotoMetadata(favourites: favourites.integerValue, comments: comments.integerValue)\n    }\n```\n\nRACObserve 监听属性的改变，使用block的KVO\n\n```Swift\nfunc RACObserve(target: NSObject!, keyPath: String) -> RACSignal  {\n  return target.rac_valuesForKeyPath(keyPath, observer: target)\n}\n```\n\n```Swift\nlet validSearchSignal = RACObserve(self, \"searchText\").mapAs {\n    (text: NSString) -> NSNumber in\n    return text.length > 3\n  }.distinctUntilChanged();\n```","slug":"swift-rac2","updated":1413119353000,"excerpt":"","_id":"s5abjojbaxy2t4ju","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"AsyncDisplayKit：Paper的异步UI技术(一)","date":1413739524000,"tags":[],"content":"<p>自从上次听了 Facebook 的技术分享之后，对它的异步 UI 技术非常的神往。<br>终于，在几个月后，看到 GitHub - ObjC 排行榜第一名的 AsyncDisplayKit ！</p>\n<p><img src=\"/img/asyncdisplaykit-logo.png\" alt=\"logo\"></p>\n<p>AsyncDisplayKit 是 Facebook 的 Paper 团队在项目研发时的副产品<br>基于以下一些理由</p>\n<ol>\n<li>手势和物理动画相结合 (POP引擎) ，还要有非常流畅的效果。</li>\n<li>丢帧的效果令人沮丧，失败的预期会导致人焦虑。</li>\n<li>触控和动画都是至关重要的，需要60FPS的水准。</li>\n<li>CA 引擎只作用于静态动画，无法处理手势和物理效果动画。</li>\n<li>用户可以在任意状态下操作界面，而静态动画往往是 fire-and-forget.</li>\n<li>当你决定不再需要渲染时Block主线程时，自然而然会想到在设计初始就用一个特殊的架构去实现。</li>\n</ol>\n<p>导致丢帧的因素可能有哪些呢？</p>\n<ol>\n<li>拖延主线程超过5毫秒，将导致丢帧。</li>\n<li><ul>\n<li>layoutSubViews / - layoutSublayers</li>\n</ul>\n</li>\n<li><ul>\n<li>drawRect:</li>\n</ul>\n</li>\n<li>UIView: init / addSubview: / removeFromSuperview / dealloc</li>\n</ol>\n<p>异步UI设计了 Node 这样一个新的数据结构</p>\n<p>Node 是类似于 View 的一种视图对象，但是它的渲染都不在主线程完成，所以一定不会卡住主线程，同时可以转换为 View, 借用官方的一个图来说：</p>\n<p><img src=\"/img/asyncdisplaykit-node.png\" alt=\"node\"></p>\n<p> 今天就到这里，未完待续！</p>\n","source":"_posts/asyncdisplaykit.md","raw":"title: AsyncDisplayKit：Paper的异步UI技术(一)\ndate: 2014-10-20 01:25:24\ntags:\n---\n\n自从上次听了 Facebook 的技术分享之后，对它的异步 UI 技术非常的神往。\n终于，在几个月后，看到 GitHub - ObjC 排行榜第一名的 AsyncDisplayKit ！\n\n![logo](/img/asyncdisplaykit-logo.png)\n\nAsyncDisplayKit 是 Facebook 的 Paper 团队在项目研发时的副产品\n基于以下一些理由\n\n1. 手势和物理动画相结合 (POP引擎) ，还要有非常流畅的效果。\n2. 丢帧的效果令人沮丧，失败的预期会导致人焦虑。\n3. 触控和动画都是至关重要的，需要60FPS的水准。\n4. CA 引擎只作用于静态动画，无法处理手势和物理效果动画。\n5. 用户可以在任意状态下操作界面，而静态动画往往是 fire-and-forget.\n6. 当你决定不再需要渲染时Block主线程时，自然而然会想到在设计初始就用一个特殊的架构去实现。\n\n\n导致丢帧的因素可能有哪些呢？\n\n1. 拖延主线程超过5毫秒，将导致丢帧。\n2. - layoutSubViews / - layoutSublayers\n3. - drawRect:\n4. UIView: init / addSubview: / removeFromSuperview / dealloc\n\n\n异步UI设计了 Node 这样一个新的数据结构\n\nNode 是类似于 View 的一种视图对象，但是它的渲染都不在主线程完成，所以一定不会卡住主线程，同时可以转换为 View, 借用官方的一个图来说：\n\n![node](/img/asyncdisplaykit-node.png)\n\n 今天就到这里，未完待续！\n\n\n\n\n\n\n","slug":"asyncdisplaykit","updated":1413741225000,"excerpt":"","_id":"kdqf8nf22t0dv538","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"AsyncDisplayKit：Paper的异步UI技术(二)","date":1413870112000,"tags":[],"content":"<p>使用 Node 这一重新设计的类型，我们可以很方便的在后台进行界面渲染</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(_backgroundQueue, ^{</div><div class=\"line\">  ASTextNode *node = [[ASTextNode alloc] init];</div><div class=\"line\">  node<span class=\"variable\">.attributedString</span> = [[NSAttributedString alloc] initWithString:<span class=\"string\">@\"hello!\"</span></div><div class=\"line\">                                                          attributes:<span class=\"literal\">nil</span>];</div><div class=\"line\">  [node measure:CGSizeMake(screenWidth, FLT_MAX)];</div><div class=\"line\">  node<span class=\"variable\">.frame</span> = (<span class=\"built_in\">CGRect</span>){ CGPointZero, node<span class=\"variable\">.calculatedSize</span> };</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// self.view isn't a node, so we can only use it on the main thread</span></div><div class=\"line\">  <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^{</div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:node<span class=\"variable\">.view</span>];</div><div class=\"line\">  });</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>目前可以使用的 Node 有以下几种</p>\n<ul>\n<li>ASDisplayNode. Counterpart to UIView — subclass to make custom nodes.</li>\n<li>ASControlNode. Analogous to UIControl — subclass to make buttons.</li>\n<li>ASImageNode. Like UIImageView — decodes images asynchronously.</li>\n<li>ASTextNode. Like UITextView — built on TextKit with full-featured rich text support.</li>\n<li>ASTableView. UITableView subclass that supports nodes.</li>\n</ul>\n<p>我们可以在 - loadView 实现里这么写</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_imageView = [[UIImageView alloc] init];</div><div class=\"line\">_imageView.image = [UIImage imageNamed:@<span class=\"string\">\"hello\"</span>];</div><div class=\"line\">_imageView.frame = CGRectMake(<span class=\"number\">10.0f</span>, <span class=\"number\">10.0f</span>, <span class=\"number\">40.0f</span>, <span class=\"number\">40.0f</span>);</div><div class=\"line\">[self.view addSubview:_imageView];</div></pre></td></tr></table></figure>\n\n<p>Node 版本</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">_imageNode</span> = [[ASImageNode alloc] init];</div><div class=\"line\"><span class=\"constant\">_imageNode.backgroundColor</span> = [UIColor lightGrayColor];</div><div class=\"line\"><span class=\"constant\">_imageNode.image</span> = [UIImage imageNamed:@<span class=\"string\">\"hello\"</span>];</div><div class=\"line\"><span class=\"constant\">_imageNode.frame</span> = CGRectMake(<span class=\"number\">10.0</span>f, <span class=\"number\">10.0</span>f, <span class=\"number\">40.0</span>f, <span class=\"number\">40.0</span>f);</div><div class=\"line\">[self.view addSubview:_imageNode.view];</div></pre></td></tr></table></figure>\n\n<p>表面看，上面的代码并没有用到异步 UI 渲染，但实际上速度仍然要快一点，因为 _imageNode.image = xxx 会在后台执行，所以能充分利用多核的计算能力。</p>\n<p>此外，我们也能够使用 Node 来响应交互事件</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</div><div class=\"line\">{</div><div class=\"line\">  [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// attribute a string</span></div><div class=\"line\">  <span class=\"built_in\">NSDictionary</span> *attrs = @{</div><div class=\"line\">                          NSFontAttributeName: [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">12.0</span>f],</div><div class=\"line\">                          NSForegroundColorAttributeName: [<span class=\"built_in\">UIColor</span> redColor],</div><div class=\"line\">                          };</div><div class=\"line\">  NSAttributedString *string = [[NSAttributedString alloc] initWithString:<span class=\"string\">@\"shuffle\"</span></div><div class=\"line\">                                                               attributes:attrs];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// create the node</span></div><div class=\"line\">  _shuffleNode = [[ASTextNode alloc] init];</div><div class=\"line\">  _shuffleNode<span class=\"variable\">.attributedString</span> = string;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// configure the button</span></div><div class=\"line\">  _shuffleNode<span class=\"variable\">.userInteractionEnabled</span> = <span class=\"literal\">YES</span>; <span class=\"comment\">// opt into touch handling</span></div><div class=\"line\">  [_shuffleNode addTarget:<span class=\"keyword\">self</span></div><div class=\"line\">                   action:<span class=\"keyword\">@selector</span>(buttonTapped:)</div><div class=\"line\">         forControlEvents:ASControlNodeEventTouchUpInside];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// size all the things</span></div><div class=\"line\">  <span class=\"built_in\">CGRect</span> b = <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.bounds</span>; <span class=\"comment\">// convenience</span></div><div class=\"line\">  <span class=\"built_in\">CGSize</span> size = [_shuffleNode measure:CGSizeMake(b<span class=\"variable\">.size</span><span class=\"variable\">.width</span>, FLT_MAX)];</div><div class=\"line\">  <span class=\"built_in\">CGPoint</span> origin = CGPointMake(roundf( (b<span class=\"variable\">.size</span><span class=\"variable\">.width</span> - size<span class=\"variable\">.width</span>) / <span class=\"number\">2.0</span>f ),</div><div class=\"line\">                               roundf( (b<span class=\"variable\">.size</span><span class=\"variable\">.height</span> - size<span class=\"variable\">.height</span>) / <span class=\"number\">2.0</span>f ));</div><div class=\"line\">  _shuffleNode<span class=\"variable\">.frame</span> = (<span class=\"built_in\">CGRect</span>){ origin, size };</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// add to our view</span></div><div class=\"line\">  [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:_shuffleNode<span class=\"variable\">.view</span>];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)buttonTapped:(<span class=\"keyword\">id</span>)sender</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"tapped!\"</span>);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>有一个问题是，按钮的大小并非有 44 那么高。所以我们这里还需要提供一个方法，让触摸的热点变的更大。</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// size all the things</div><div class=\"line\"> /* <span class=\"keyword\">...</span> */</div><div class=\"line\"></div><div class=\"line\"> // make the tap target taller</div><div class=\"line\"> CGFloat extendY = roundf( (<span class=\"number\">44.</span>0f - size.height) / <span class=\"number\">2.</span>0f );</div><div class=\"line\"> _shuffleNode.hitTestSlop = UIEdgeInsetsMake(-extendY, <span class=\"number\">0.</span>0f, -extendY, <span class=\"number\">0.</span>0f);</div></pre></td></tr></table></figure>\n\n","source":"_posts/asyncdisplaykit2.md","raw":"title: AsyncDisplayKit：Paper的异步UI技术(二)\ndate: 2014-10-21 13:41:52\ntags:\n---\n\n使用 Node 这一重新设计的类型，我们可以很方便的在后台进行界面渲染\n\n```Objective-C\n\ndispatch_async(_backgroundQueue, ^{\n  ASTextNode *node = [[ASTextNode alloc] init];\n  node.attributedString = [[NSAttributedString alloc] initWithString:@\"hello!\"\n                                                          attributes:nil];\n  [node measure:CGSizeMake(screenWidth, FLT_MAX)];\n  node.frame = (CGRect){ CGPointZero, node.calculatedSize };\n\n  // self.view isn't a node, so we can only use it on the main thread\n  dispatch_sync(dispatch_get_main_queue(), ^{\n    [self.view addSubview:node.view];\n  });\n});\n\n```\n\n目前可以使用的 Node 有以下几种\n\n* ASDisplayNode. Counterpart to UIView — subclass to make custom nodes.\n* ASControlNode. Analogous to UIControl — subclass to make buttons.\n* ASImageNode. Like UIImageView — decodes images asynchronously.\n* ASTextNode. Like UITextView — built on TextKit with full-featured rich text support.\n* ASTableView. UITableView subclass that supports nodes.\n\n我们可以在 - loadView 实现里这么写\n\n```Objective-C\n_imageView = [[UIImageView alloc] init];\n_imageView.image = [UIImage imageNamed:@\"hello\"];\n_imageView.frame = CGRectMake(10.0f, 10.0f, 40.0f, 40.0f);\n[self.view addSubview:_imageView];\n```\n\nNode 版本\n\n```Objective-C\n_imageNode = [[ASImageNode alloc] init];\n_imageNode.backgroundColor = [UIColor lightGrayColor];\n_imageNode.image = [UIImage imageNamed:@\"hello\"];\n_imageNode.frame = CGRectMake(10.0f, 10.0f, 40.0f, 40.0f);\n[self.view addSubview:_imageNode.view];\n```\n\n表面看，上面的代码并没有用到异步 UI 渲染，但实际上速度仍然要快一点，因为 _imageNode.image = xxx 会在后台执行，所以能充分利用多核的计算能力。\n\n\n此外，我们也能够使用 Node 来响应交互事件\n\n```Objective-C\n- (void)viewDidLoad\n{\n  [super viewDidLoad];\n\n  // attribute a string\n  NSDictionary *attrs = @{\n                          NSFontAttributeName: [UIFont systemFontOfSize:12.0f],\n                          NSForegroundColorAttributeName: [UIColor redColor],\n                          };\n  NSAttributedString *string = [[NSAttributedString alloc] initWithString:@\"shuffle\"\n                                                               attributes:attrs];\n\n  // create the node\n  _shuffleNode = [[ASTextNode alloc] init];\n  _shuffleNode.attributedString = string;\n\n  // configure the button\n  _shuffleNode.userInteractionEnabled = YES; // opt into touch handling\n  [_shuffleNode addTarget:self\n                   action:@selector(buttonTapped:)\n         forControlEvents:ASControlNodeEventTouchUpInside];\n\n  // size all the things\n  CGRect b = self.view.bounds; // convenience\n  CGSize size = [_shuffleNode measure:CGSizeMake(b.size.width, FLT_MAX)];\n  CGPoint origin = CGPointMake(roundf( (b.size.width - size.width) / 2.0f ),\n                               roundf( (b.size.height - size.height) / 2.0f ));\n  _shuffleNode.frame = (CGRect){ origin, size };\n\n  // add to our view\n  [self.view addSubview:_shuffleNode.view];\n}\n\n- (void)buttonTapped:(id)sender\n{\n  NSLog(@\"tapped!\");\n}\n\n```\n\n有一个问题是，按钮的大小并非有 44 那么高。所以我们这里还需要提供一个方法，让触摸的热点变的更大。\n\n```Objective-C\n // size all the things\n  /* ... */\n\n  // make the tap target taller\n  CGFloat extendY = roundf( (44.0f - size.height) / 2.0f );\n  _shuffleNode.hitTestSlop = UIEdgeInsetsMake(-extendY, 0.0f, -extendY, 0.0f);\n```\n\n","slug":"asyncdisplaykit2","updated":1414341603000,"excerpt":"","_id":"nu15cf4c0pg6e4aw","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"使用 Mantle 来序列化对象","date":1414968671000,"tags":[],"content":"<p>Mantle 是一个 Cocoa 的 Model 工具，非常的强大。</p>\n<p>在很早的时候 Cocoa Love 上就发布了一篇文章，JSON -&gt; Model 这个过程其实可以通过 OC 强大的动态特性来自动完成，自此之后，许多自动序列化工具如雨后春笋搬的在 Github 上出现了，这里面的佼佼者就是 Mantle，Github 团队出品。</p>\n<p>当我们不用任何自动序列化工具时，是如何完成一个 JSON -&gt; Model 的过程呢？</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> : NSUInteger {</div><div class=\"line\">    GHIssueStateOpen,</div><div class=\"line\">    GHIssueStateClosed</div><div class=\"line\">} GHIssueState;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GHIssue</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCoding</span>, <span class=\"title\">NSCopying</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *URL;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *HTMLURL;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSNumber</span> *number;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>, <span class=\"keyword\">readonly</span>) GHIssueState state;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *reporterLogin;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *updatedAt;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) GHUser *assignee;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *retrievedAt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *title;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *body;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithDictionary:(<span class=\"built_in\">NSDictionary</span> *)dictionary;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GHIssue</span></span></div><div class=\"line\"></div><div class=\"line\">+ (NSDateFormatter *)dateFormatter {</div><div class=\"line\">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];</div><div class=\"line\">    dateFormatter<span class=\"variable\">.locale</span> = [[NSLocale alloc] initWithLocaleIdentifier:<span class=\"string\">@\"en_US_POSIX\"</span>];</div><div class=\"line\">    dateFormatter<span class=\"variable\">.dateFormat</span> = <span class=\"string\">@\"yyyy-MM-dd'T'HH:mm:ss'Z'\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateFormatter;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithDictionary:(<span class=\"built_in\">NSDictionary</span> *)dictionary {</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == <span class=\"literal\">nil</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    _URL = [<span class=\"built_in\">NSURL</span> URLWithString:dictionary[<span class=\"string\">@\"url\"</span>]];</div><div class=\"line\">    _HTMLURL = [<span class=\"built_in\">NSURL</span> URLWithString:dictionary[<span class=\"string\">@\"html_url\"</span>]];</div><div class=\"line\">    _number = dictionary[<span class=\"string\">@\"number\"</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ([dictionary[<span class=\"string\">@\"state\"</span>] isEqualToString:<span class=\"string\">@\"open\"</span>]) {</div><div class=\"line\">        _state = GHIssueStateOpen;</div><div class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([dictionary[<span class=\"string\">@\"state\"</span>] isEqualToString:<span class=\"string\">@\"closed\"</span>]) {</div><div class=\"line\">        _state = GHIssueStateClosed;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    _title = [dictionary[<span class=\"string\">@\"title\"</span>] <span class=\"keyword\">copy</span>];</div><div class=\"line\">    _retrievedAt = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\">    _body = [dictionary[<span class=\"string\">@\"body\"</span>] <span class=\"keyword\">copy</span>];</div><div class=\"line\">    _reporterLogin = [dictionary[<span class=\"string\">@\"user\"</span>][<span class=\"string\">@\"login\"</span>] <span class=\"keyword\">copy</span>];</div><div class=\"line\">    _assignee = [[GHUser alloc] initWithDictionary:dictionary[<span class=\"string\">@\"assignee\"</span>]];</div><div class=\"line\"></div><div class=\"line\">    _updatedAt = [<span class=\"keyword\">self</span><span class=\"variable\">.class</span><span class=\"variable\">.dateFormatter</span> dateFromString:dictionary[<span class=\"string\">@\"updated_at\"</span>]];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(NSCoder *)coder {</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == <span class=\"literal\">nil</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    _URL = [coder decodeObjectForKey:<span class=\"string\">@\"URL\"</span>];</div><div class=\"line\">    _HTMLURL = [coder decodeObjectForKey:<span class=\"string\">@\"HTMLURL\"</span>];</div><div class=\"line\">    _number = [coder decodeObjectForKey:<span class=\"string\">@\"number\"</span>];</div><div class=\"line\">    _state = [coder decodeUnsignedIntegerForKey:<span class=\"string\">@\"state\"</span>];</div><div class=\"line\">    _title = [coder decodeObjectForKey:<span class=\"string\">@\"title\"</span>];</div><div class=\"line\">    _retrievedAt = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\">    _body = [coder decodeObjectForKey:<span class=\"string\">@\"body\"</span>];</div><div class=\"line\">    _reporterLogin = [coder decodeObjectForKey:<span class=\"string\">@\"reporterLogin\"</span>];</div><div class=\"line\">    _assignee = [coder decodeObjectForKey:<span class=\"string\">@\"assignee\"</span>];</div><div class=\"line\">    _updatedAt = [coder decodeObjectForKey:<span class=\"string\">@\"updatedAt\"</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(NSCoder *)coder {</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.URL</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.URL</span> forKey:<span class=\"string\">@\"URL\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.HTMLURL</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.HTMLURL</span> forKey:<span class=\"string\">@\"HTMLURL\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.number</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.number</span> forKey:<span class=\"string\">@\"number\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.title</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.title</span> forKey:<span class=\"string\">@\"title\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.body</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.body</span> forKey:<span class=\"string\">@\"body\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.reporterLogin</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.reporterLogin</span> forKey:<span class=\"string\">@\"reporterLogin\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.assignee</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.assignee</span> forKey:<span class=\"string\">@\"assignee\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.updatedAt</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.updatedAt</span> forKey:<span class=\"string\">@\"updatedAt\"</span>];</div><div class=\"line\"></div><div class=\"line\">    [coder encodeUnsignedInteger:<span class=\"keyword\">self</span><span class=\"variable\">.state</span> forKey:<span class=\"string\">@\"state\"</span>];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(NSZone *)zone {</div><div class=\"line\">    GHIssue *issue = [[<span class=\"keyword\">self</span><span class=\"variable\">.class</span> allocWithZone:zone] init];</div><div class=\"line\">    issue-&gt;_URL = <span class=\"keyword\">self</span><span class=\"variable\">.URL</span>;</div><div class=\"line\">    issue-&gt;_HTMLURL = <span class=\"keyword\">self</span><span class=\"variable\">.HTMLURL</span>;</div><div class=\"line\">    issue-&gt;_number = <span class=\"keyword\">self</span><span class=\"variable\">.number</span>;</div><div class=\"line\">    issue-&gt;_state = <span class=\"keyword\">self</span><span class=\"variable\">.state</span>;</div><div class=\"line\">    issue-&gt;_reporterLogin = <span class=\"keyword\">self</span><span class=\"variable\">.reporterLogin</span>;</div><div class=\"line\">    issue-&gt;_assignee = <span class=\"keyword\">self</span><span class=\"variable\">.assignee</span>;</div><div class=\"line\">    issue-&gt;_updatedAt = <span class=\"keyword\">self</span><span class=\"variable\">.updatedAt</span>;</div><div class=\"line\"></div><div class=\"line\">    issue<span class=\"variable\">.title</span> = <span class=\"keyword\">self</span><span class=\"variable\">.title</span>;</div><div class=\"line\">    issue-&gt;_retrievedAt = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\">    issue<span class=\"variable\">.body</span> = <span class=\"keyword\">self</span><span class=\"variable\">.body</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> issue;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (NSUInteger)hash {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span><span class=\"variable\">.number</span><span class=\"variable\">.hash</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isEqual:(GHIssue *)issue {</div><div class=\"line\">    <span class=\"keyword\">if</span> (![issue isKindOfClass:GHIssue<span class=\"variable\">.class</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span><span class=\"variable\">.number</span> isEqual:issue<span class=\"variable\">.number</span>] && [<span class=\"keyword\">self</span><span class=\"variable\">.title</span> isEqual:issue<span class=\"variable\">.title</span>] && [<span class=\"keyword\">self</span><span class=\"variable\">.body</span> isEqual:issue<span class=\"variable\">.body</span>];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p>尽管我们写了这么多代码，但是仍然存在很多问题</p>\n<ul>\n<li>没有途径去方便的更新 GHIssue 类型</li>\n<li>如果要从对象的 GHIssue 类型逆推出 JSON 也是件困难的事情</li>\n<li>archives 很容易因为类型升级而损坏</li>\n</ul>\n<p>假如用了 MTLModel 一切就变的很自然了</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> : NSUInteger {</div><div class=\"line\">    GHIssueStateOpen,</div><div class=\"line\">    GHIssueStateClosed</div><div class=\"line\">} GHIssueState;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GHIssue</span> : <span class=\"title\">MTLModel</span> &lt;<span class=\"title\">MTLJSONSerializing</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *URL;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *HTMLURL;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSNumber</span> *number;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>, <span class=\"keyword\">readonly</span>) GHIssueState state;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *reporterLogin;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) GHUser *assignee;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *updatedAt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *title;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *body;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *retrievedAt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GHIssue</span></span></div><div class=\"line\"></div><div class=\"line\">+ (NSDateFormatter *)dateFormatter {</div><div class=\"line\">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];</div><div class=\"line\">    dateFormatter<span class=\"variable\">.locale</span> = [[NSLocale alloc] initWithLocaleIdentifier:<span class=\"string\">@\"en_US_POSIX\"</span>];</div><div class=\"line\">    dateFormatter<span class=\"variable\">.dateFormat</span> = <span class=\"string\">@\"yyyy-MM-dd'T'HH:mm:ss'Z'\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateFormatter;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">NSDictionary</span> *)JSONKeyPathsByPropertyKey {</div><div class=\"line\">    <span class=\"keyword\">return</span> @{</div><div class=\"line\">        <span class=\"string\">@\"URL\"</span>: <span class=\"string\">@\"url\"</span>,</div><div class=\"line\">        <span class=\"string\">@\"HTMLURL\"</span>: <span class=\"string\">@\"html_url\"</span>,</div><div class=\"line\">        <span class=\"string\">@\"reporterLogin\"</span>: <span class=\"string\">@\"user.login\"</span>,</div><div class=\"line\">        <span class=\"string\">@\"assignee\"</span>: <span class=\"string\">@\"assignee\"</span>,</div><div class=\"line\">        <span class=\"string\">@\"updatedAt\"</span>: <span class=\"string\">@\"updated_at\"</span></div><div class=\"line\">    };</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)URLJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)HTMLURLJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)stateJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [NSValueTransformer mtl_valueMappingTransformerWithDictionary:@{</div><div class=\"line\">        <span class=\"string\">@\"open\"</span>: @(GHIssueStateOpen),</div><div class=\"line\">        <span class=\"string\">@\"closed\"</span>: @(GHIssueStateClosed)</div><div class=\"line\">    }];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)assigneeJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [NSValueTransformer mtl_JSONDictionaryTransformerWithModelClass:GHUser<span class=\"variable\">.class</span>];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)updatedAtJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [MTLValueTransformer reversibleTransformerWithForwardBlock:^(<span class=\"built_in\">NSString</span> *str) {</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span><span class=\"variable\">.dateFormatter</span> dateFromString:str];</div><div class=\"line\">    } reverseBlock:^(<span class=\"built_in\">NSDate</span> *date) {</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span><span class=\"variable\">.dateFormatter</span> stringFromDate:date];</div><div class=\"line\">    }];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (instancetype)initWithDictionary:(<span class=\"built_in\">NSDictionary</span> *)dictionaryValue error:(<span class=\"built_in\">NSError</span> **)error {</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> initWithDictionary:dictionaryValue error:error];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == <span class=\"literal\">nil</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Store a value that needs to be determined locally upon initialization.</span></div><div class=\"line\">    _retrievedAt = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p>除了 序列化 MTLModel 还免费提供了以下特性</p>\n<ul>\n<li>hash </li>\n<li>NSCoding</li>\n<li>-isEqual:</li>\n</ul>\n<p>真的是非常贴心的工具。</p>\n","source":"_posts/use-mantle.md","raw":"title: 使用 Mantle 来序列化对象\ndate: 2014-11-03 06:51:11\ntags:\n---\n\nMantle 是一个 Cocoa 的 Model 工具，非常的强大。\n\n在很早的时候 Cocoa Love 上就发布了一篇文章，JSON -> Model 这个过程其实可以通过 OC 强大的动态特性来自动完成，自此之后，许多自动序列化工具如雨后春笋搬的在 Github 上出现了，这里面的佼佼者就是 Mantle，Github 团队出品。\n\n当我们不用任何自动序列化工具时，是如何完成一个 JSON -> Model 的过程呢？\n\n```Objective-C\ntypedef enum : NSUInteger {\n    GHIssueStateOpen,\n    GHIssueStateClosed\n} GHIssueState;\n\n@interface GHIssue : NSObject <NSCoding, NSCopying>\n\n@property (nonatomic, copy, readonly) NSURL *URL;\n@property (nonatomic, copy, readonly) NSURL *HTMLURL;\n@property (nonatomic, copy, readonly) NSNumber *number;\n@property (nonatomic, assign, readonly) GHIssueState state;\n@property (nonatomic, copy, readonly) NSString *reporterLogin;\n@property (nonatomic, copy, readonly) NSDate *updatedAt;\n@property (nonatomic, strong, readonly) GHUser *assignee;\n@property (nonatomic, copy, readonly) NSDate *retrievedAt;\n\n@property (nonatomic, copy) NSString *title;\n@property (nonatomic, copy) NSString *body;\n\n- (id)initWithDictionary:(NSDictionary *)dictionary;\n\n@end\n```\n\n```Objective-C\n@implementation GHIssue\n\n+ (NSDateFormatter *)dateFormatter {\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    dateFormatter.locale = [[NSLocale alloc] initWithLocaleIdentifier:@\"en_US_POSIX\"];\n    dateFormatter.dateFormat = @\"yyyy-MM-dd'T'HH:mm:ss'Z'\";\n    return dateFormatter;\n}\n\n- (id)initWithDictionary:(NSDictionary *)dictionary {\n    self = [self init];\n    if (self == nil) return nil;\n\n    _URL = [NSURL URLWithString:dictionary[@\"url\"]];\n    _HTMLURL = [NSURL URLWithString:dictionary[@\"html_url\"]];\n    _number = dictionary[@\"number\"];\n\n    if ([dictionary[@\"state\"] isEqualToString:@\"open\"]) {\n        _state = GHIssueStateOpen;\n    } else if ([dictionary[@\"state\"] isEqualToString:@\"closed\"]) {\n        _state = GHIssueStateClosed;\n    }\n\n    _title = [dictionary[@\"title\"] copy];\n    _retrievedAt = [NSDate date];\n    _body = [dictionary[@\"body\"] copy];\n    _reporterLogin = [dictionary[@\"user\"][@\"login\"] copy];\n    _assignee = [[GHUser alloc] initWithDictionary:dictionary[@\"assignee\"]];\n\n    _updatedAt = [self.class.dateFormatter dateFromString:dictionary[@\"updated_at\"]];\n\n    return self;\n}\n\n- (id)initWithCoder:(NSCoder *)coder {\n    self = [self init];\n    if (self == nil) return nil;\n\n    _URL = [coder decodeObjectForKey:@\"URL\"];\n    _HTMLURL = [coder decodeObjectForKey:@\"HTMLURL\"];\n    _number = [coder decodeObjectForKey:@\"number\"];\n    _state = [coder decodeUnsignedIntegerForKey:@\"state\"];\n    _title = [coder decodeObjectForKey:@\"title\"];\n    _retrievedAt = [NSDate date];\n    _body = [coder decodeObjectForKey:@\"body\"];\n    _reporterLogin = [coder decodeObjectForKey:@\"reporterLogin\"];\n    _assignee = [coder decodeObjectForKey:@\"assignee\"];\n    _updatedAt = [coder decodeObjectForKey:@\"updatedAt\"];\n\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)coder {\n    if (self.URL != nil) [coder encodeObject:self.URL forKey:@\"URL\"];\n    if (self.HTMLURL != nil) [coder encodeObject:self.HTMLURL forKey:@\"HTMLURL\"];\n    if (self.number != nil) [coder encodeObject:self.number forKey:@\"number\"];\n    if (self.title != nil) [coder encodeObject:self.title forKey:@\"title\"];\n    if (self.body != nil) [coder encodeObject:self.body forKey:@\"body\"];\n    if (self.reporterLogin != nil) [coder encodeObject:self.reporterLogin forKey:@\"reporterLogin\"];\n    if (self.assignee != nil) [coder encodeObject:self.assignee forKey:@\"assignee\"];\n    if (self.updatedAt != nil) [coder encodeObject:self.updatedAt forKey:@\"updatedAt\"];\n\n    [coder encodeUnsignedInteger:self.state forKey:@\"state\"];\n}\n\n- (id)copyWithZone:(NSZone *)zone {\n    GHIssue *issue = [[self.class allocWithZone:zone] init];\n    issue->_URL = self.URL;\n    issue->_HTMLURL = self.HTMLURL;\n    issue->_number = self.number;\n    issue->_state = self.state;\n    issue->_reporterLogin = self.reporterLogin;\n    issue->_assignee = self.assignee;\n    issue->_updatedAt = self.updatedAt;\n\n    issue.title = self.title;\n    issue->_retrievedAt = [NSDate date];\n    issue.body = self.body;\n\n    return issue;\n}\n\n- (NSUInteger)hash {\n    return self.number.hash;\n}\n\n- (BOOL)isEqual:(GHIssue *)issue {\n    if (![issue isKindOfClass:GHIssue.class]) return NO;\n\n    return [self.number isEqual:issue.number] && [self.title isEqual:issue.title] && [self.body isEqual:issue.body];\n}\n\n@end\n```\n\n尽管我们写了这么多代码，但是仍然存在很多问题\n\n* 没有途径去方便的更新 GHIssue 类型\n* 如果要从对象的 GHIssue 类型逆推出 JSON 也是件困难的事情\n* archives 很容易因为类型升级而损坏\n\n假如用了 MTLModel 一切就变的很自然了\n\n```Objective-C\ntypedef enum : NSUInteger {\n    GHIssueStateOpen,\n    GHIssueStateClosed\n} GHIssueState;\n\n@interface GHIssue : MTLModel <MTLJSONSerializing>\n\n@property (nonatomic, copy, readonly) NSURL *URL;\n@property (nonatomic, copy, readonly) NSURL *HTMLURL;\n@property (nonatomic, copy, readonly) NSNumber *number;\n@property (nonatomic, assign, readonly) GHIssueState state;\n@property (nonatomic, copy, readonly) NSString *reporterLogin;\n@property (nonatomic, strong, readonly) GHUser *assignee;\n@property (nonatomic, copy, readonly) NSDate *updatedAt;\n\n@property (nonatomic, copy) NSString *title;\n@property (nonatomic, copy) NSString *body;\n\n@property (nonatomic, copy, readonly) NSDate *retrievedAt;\n\n@end\n```\n\n```Objective-C\n@implementation GHIssue\n\n+ (NSDateFormatter *)dateFormatter {\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    dateFormatter.locale = [[NSLocale alloc] initWithLocaleIdentifier:@\"en_US_POSIX\"];\n    dateFormatter.dateFormat = @\"yyyy-MM-dd'T'HH:mm:ss'Z'\";\n    return dateFormatter;\n}\n\n+ (NSDictionary *)JSONKeyPathsByPropertyKey {\n    return @{\n        @\"URL\": @\"url\",\n        @\"HTMLURL\": @\"html_url\",\n        @\"reporterLogin\": @\"user.login\",\n        @\"assignee\": @\"assignee\",\n        @\"updatedAt\": @\"updated_at\"\n    };\n}\n\n+ (NSValueTransformer *)URLJSONTransformer {\n    return [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];\n}\n\n+ (NSValueTransformer *)HTMLURLJSONTransformer {\n    return [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];\n}\n\n+ (NSValueTransformer *)stateJSONTransformer {\n    return [NSValueTransformer mtl_valueMappingTransformerWithDictionary:@{\n        @\"open\": @(GHIssueStateOpen),\n        @\"closed\": @(GHIssueStateClosed)\n    }];\n}\n\n+ (NSValueTransformer *)assigneeJSONTransformer {\n    return [NSValueTransformer mtl_JSONDictionaryTransformerWithModelClass:GHUser.class];\n}\n\n+ (NSValueTransformer *)updatedAtJSONTransformer {\n    return [MTLValueTransformer reversibleTransformerWithForwardBlock:^(NSString *str) {\n        return [self.dateFormatter dateFromString:str];\n    } reverseBlock:^(NSDate *date) {\n        return [self.dateFormatter stringFromDate:date];\n    }];\n}\n\n- (instancetype)initWithDictionary:(NSDictionary *)dictionaryValue error:(NSError **)error {\n    self = [super initWithDictionary:dictionaryValue error:error];\n    if (self == nil) return nil;\n\n    // Store a value that needs to be determined locally upon initialization.\n    _retrievedAt = [NSDate date];\n\n    return self;\n}\n\n@end\n```\n\n除了 序列化 MTLModel 还免费提供了以下特性\n\n* hash \n* NSCoding\n* -isEqual:\n\n真的是非常贴心的工具。\n","slug":"use-mantle","updated":1414969886000,"excerpt":"","_id":"b7zoyxsthd96hu9n","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"SwiftyJSON 技术分析","date":1415570914000,"tags":[],"content":"<p>在 OC 中，得益于开源社区的努力，我们可以很愉快的使用 JSON 格式的数据进行各种功能实现。<br>但是在 Swift 中，JSON的使用成为了一件痛苦的事情，如下</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> jsonObject : <span class=\"type\">AnyObject</span>! = <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(dataFromTwitter, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">MutableContainers</span>, error: <span class=\"built_in\">nil</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> statusesArray = jsonObject <span class=\"keyword\">as</span>? <span class=\"type\">NSArray</span>{</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> aStatus = statusesArray[<span class=\"number\">0</span>] <span class=\"keyword\">as</span>? <span class=\"type\">NSDictionary</span>{</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> user = aStatus[<span class=\"string\">\"user\"</span>] <span class=\"keyword\">as</span>? <span class=\"type\">NSDictionary</span>{</div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> userName = user[<span class=\"string\">\"name\"</span>] <span class=\"keyword\">as</span>? <span class=\"type\">NSDictionary</span>{</div><div class=\"line\">                <span class=\"comment\">//Finally We Got The Name</span></div><div class=\"line\"></div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>由于可选值类型的出现，再也不能像以前那样愉快的玩耍了 :(<br>你也可以用可选值链 optional chain 来进行操作，但是这样一来，代码基本不能读了</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> jsonObject : <span class=\"type\">AnyObject</span>! = <span class=\"type\">NSJSONSerialization</span>.<span class=\"type\">JSONObjectWithData</span>(dataFromTwitter, options: <span class=\"type\">NSJSONReadingOptions</span>.<span class=\"type\">MutableContainers</span>, error: <span class=\"built_in\">nil</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> userName = (((jsonObject <span class=\"keyword\">as</span>? <span class=\"type\">NSArray</span>)?[<span class=\"number\">0</span>] <span class=\"keyword\">as</span>? <span class=\"type\">NSDictionary</span>)?[<span class=\"string\">\"user\"</span>] <span class=\"keyword\">as</span>? <span class=\"type\">NSDictionary</span>)?[<span class=\"string\">\"name\"</span>]{</div><div class=\"line\">  <span class=\"comment\">//What A disaster above</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>但是开发者都是很聪明的，很快就有了 Swift 版本的开源库 SwiftJSON<br><a href=\"https://github.com/SwiftyJSON/SwiftyJSON\" target=\"_blank\" rel=\"external\">https://github.com/SwiftyJSON/SwiftyJSON</a><br>透过 SwiftJSON 代码可能是这样的 </p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> json = <span class=\"type\">JSON</span>(data: dataFromNetworking)</div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> userName = json[<span class=\"number\">0</span>][<span class=\"string\">\"user\"</span>][<span class=\"string\">\"name\"</span>].string{</div><div class=\"line\">  <span class=\"comment\">//就这么简单取到了。</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>其中，作者重写了所有的下标方法，不论怎么玩都不会崩溃了，妈妈再也不担心我被服务端API绑架了 :)</p>\n","source":"_posts/SwiftJson.md","raw":"title: SwiftyJSON 技术分析\ndate: 2014-11-10 06:08:34\ntags:\n---\n\n在 OC 中，得益于开源社区的努力，我们可以很愉快的使用 JSON 格式的数据进行各种功能实现。\n但是在 Swift 中，JSON的使用成为了一件痛苦的事情，如下\n\n```Swift\nlet jsonObject : AnyObject! = NSJSONSerialization.JSONObjectWithData(dataFromTwitter, options: NSJSONReadingOptions.MutableContainers, error: nil)\nif let statusesArray = jsonObject as? NSArray{\n    if let aStatus = statusesArray[0] as? NSDictionary{\n        if let user = aStatus[\"user\"] as? NSDictionary{\n            if let userName = user[\"name\"] as? NSDictionary{\n                //Finally We Got The Name\n\n            }\n        }\n    }\n}\n```\n\n由于可选值类型的出现，再也不能像以前那样愉快的玩耍了 :(\n你也可以用可选值链 optional chain 来进行操作，但是这样一来，代码基本不能读了\n\n\n```Swift\nlet jsonObject : AnyObject! = NSJSONSerialization.JSONObjectWithData(dataFromTwitter, options: NSJSONReadingOptions.MutableContainers, error: nil)\nif let userName = (((jsonObject as? NSArray)?[0] as? NSDictionary)?[\"user\"] as? NSDictionary)?[\"name\"]{\n  //What A disaster above\n}\n```\n\n但是开发者都是很聪明的，很快就有了 Swift 版本的开源库 SwiftJSON\nhttps://github.com/SwiftyJSON/SwiftyJSON\n透过 SwiftJSON 代码可能是这样的 \n\n```Swift\nlet json = JSON(data: dataFromNetworking)\nif let userName = json[0][\"user\"][\"name\"].string{\n  //就这么简单取到了。\n}\n```\n\n其中，作者重写了所有的下标方法，不论怎么玩都不会崩溃了，妈妈再也不担心我被服务端API绑架了 :)\n\n\n\n\n","slug":"SwiftJson","updated":1415571502000,"excerpt":"","_id":"js6rkpkwxsswpgvw","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"语言与思维","date":1416132604000,"tags":[],"content":"<p>聊点好玩的。。</p>\n<p>大学时候学过半年的日语，记得当时老师说了一个让人很震惊的事实，小学课本有 2000 个单词，其中 1300 个是日本人发明的，比如 “科学”，“民主”，“电话”，“冰箱”，“民主”，“科长”。太多了，可以说近代汉语日本的贡献非常大，为什么当初日本人要从汉语来解释西方的近代文明而非直接拿取英语的那套呢？这里就需要解释一个问题：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">汉语是远远比其它语言先进的</div></pre></td></tr></table></figure>\n\n<p>很多人自然而然的认同了这个观点，因为毕竟是自己的母语嘛，加上对鸟语的痛恨，可是真要问为什么，可能大多数人都说不出个一二三来。所以现在可以尝试翻译下下面句子到英文：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">树上有鸟</div></pre></td></tr></table></figure>\n\n<p>可能大多数人第一反应就是逐字翻译，但很不幸，这是中文思维。真正的英文思维是翻译不出这句话的，回到初中的英语课堂，一个完整的英语的句子要包含有正确的时态，数量，也即我要知道什么时间，什么地点，树上有几只鸟，才能把这个句子给翻译出来。</p>\n<p>而汉语，这就是个完整的句子，为什么呢？ 因为汉语是上下文可推导的，如果上下文是昨天，那就是昨天树上有鸟，是今天，那就是今天有。这不就是多态吗？ 所以</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">汉语是多态的，是泛化的。</div></pre></td></tr></table></figure>\n\n<p>再从汉字上来说，汉字都是二维的，而英语是一维的。<br>所谓一维就是 ABCD 我用 0123 或是其它符号替换都没问题，所以英语也可以称为密码文。<br>而汉字的组件是有意义的，比如金属 镭 ，大家看到就算之前没有见过这个字，也很容易的读出来并且理解，因为金属表明了属性，雷表明了发音。<br>汉字使用这种模式很容易产生无穷无尽的组合，而英语却不行英语，一个世纪前的文章现在可能已经没法读了，因为一维的组合很有限，而且没有组合意义。英语产生了一个新词，也需要很高的记忆成本，从这个角度上，汉语要比英语好学的多。因为成功的绕开了组合爆炸的问题，掌握了几十个组件后自然而然就理解成千上万的单词。而英语，很多人终其一生都不能理解那些术语，很多人都有阅读障碍。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">汉字是二维的，是所见即所得的。</div></pre></td></tr></table></figure>\n\n<p>令人惊叹的设计，可以说，汉语的发明者一定是一个远远超越时代的程序员。<br>从汉语再说到思维可以发现，中文思维是远远比英文思维抽象层次高的，这也体现在很多地方。<br>比如戏曲里面要骑一匹马，武将就大腿一抬，再跨个马步，就表示自己骑在马上了，而西方的戏剧，一般要牵一匹真马上台。<br>这种思维虽然落后，却产生了近代严谨的科学体系，孰优孰劣就不做过多讨论。<br>最近也看了一下Ruby的那本松本行弘的世界，书里说的一句话也非常认同。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">语言是思维本质的体现</div></pre></td></tr></table></figure>\n\n","source":"_posts/language-and-mind.md","raw":"title: 语言与思维\ndate: 2014-11-16 18:10:04\ntags:\n---\n\n聊点好玩的。。\n\n大学时候学过半年的日语，记得当时老师说了一个让人很震惊的事实，小学课本有 2000 个单词，其中 1300 个是日本人发明的，比如 “科学”，“民主”，“电话”，“冰箱”，“民主”，“科长”。太多了，可以说近代汉语日本的贡献非常大，为什么当初日本人要从汉语来解释西方的近代文明而非直接拿取英语的那套呢？这里就需要解释一个问题：\n\n```\n汉语是远远比其它语言先进的\n```\n\n很多人自然而然的认同了这个观点，因为毕竟是自己的母语嘛，加上对鸟语的痛恨，可是真要问为什么，可能大多数人都说不出个一二三来。所以现在可以尝试翻译下下面句子到英文：\n\n```\n 树上有鸟\n```\n\n可能大多数人第一反应就是逐字翻译，但很不幸，这是中文思维。真正的英文思维是翻译不出这句话的，回到初中的英语课堂，一个完整的英语的句子要包含有正确的时态，数量，也即我要知道什么时间，什么地点，树上有几只鸟，才能把这个句子给翻译出来。\n\n而汉语，这就是个完整的句子，为什么呢？ 因为汉语是上下文可推导的，如果上下文是昨天，那就是昨天树上有鸟，是今天，那就是今天有。这不就是多态吗？ 所以\n\n```\n汉语是多态的，是泛化的。\n```\n\n再从汉字上来说，汉字都是二维的，而英语是一维的。\n所谓一维就是 ABCD 我用 0123 或是其它符号替换都没问题，所以英语也可以称为密码文。\n而汉字的组件是有意义的，比如金属 镭 ，大家看到就算之前没有见过这个字，也很容易的读出来并且理解，因为金属表明了属性，雷表明了发音。\n汉字使用这种模式很容易产生无穷无尽的组合，而英语却不行英语，一个世纪前的文章现在可能已经没法读了，因为一维的组合很有限，而且没有组合意义。英语产生了一个新词，也需要很高的记忆成本，从这个角度上，汉语要比英语好学的多。因为成功的绕开了组合爆炸的问题，掌握了几十个组件后自然而然就理解成千上万的单词。而英语，很多人终其一生都不能理解那些术语，很多人都有阅读障碍。\n\n```\n汉字是二维的，是所见即所得的。\n```\n\n令人惊叹的设计，可以说，汉语的发明者一定是一个远远超越时代的程序员。\n从汉语再说到思维可以发现，中文思维是远远比英文思维抽象层次高的，这也体现在很多地方。\n比如戏曲里面要骑一匹马，武将就大腿一抬，再跨个马步，就表示自己骑在马上了，而西方的戏剧，一般要牵一匹真马上台。\n这种思维虽然落后，却产生了近代严谨的科学体系，孰优孰劣就不做过多讨论。\n最近也看了一下Ruby的那本松本行弘的世界，书里说的一句话也非常认同。\n\n```\n语言是思维本质的体现 \n```\n","slug":"language-and-mind","updated":1416138385000,"excerpt":"","_id":"1s2vx9kpmxuxlftd","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"VIPER 架构探浅","date":1416762410000,"tags":[],"content":"<p>通常，我们会使用 MVC 来构建应用，MVC 强调代码的分层原则，按照不同的逻辑分为模型，控制器，视图 三部分，但是这是个很粗糙的分层，所以很多情况下，MVC 并没有被很好的实践，以至于 C 里面塞入了大量的代码，最后变成 Massive View Controller</p>\n<p>在 objc.io 上看到一个非常好的架构，似乎解决了这个问题<br>这个架构称为 VIPER，即 视图，交互器，展示器，实体，路由。</p>\n<ul>\n<li>视图：根据展示器的要求显示界面，并将用户输入反馈给展示器。</li>\n<li>交互器：包含由用例指定的业务逻辑。</li>\n<li>展示器：包含为显示（从交互器接受的内容）做的准备工作的相关视图逻辑，并对用户输入进行反馈（从交互器获取新数据）。</li>\n<li>实体：包含交互器要使用的基本模型对象。</li>\n<li>路由：包含用来描述屏幕显示和显示顺序的导航逻辑。</li>\n</ul>\n<p>实际上是精心设计过的 MVC 架构，只是进行了更好的拆解。</p>\n<p><img src=\"/img/viper-wireframe.png\" alt=\"viper-wireframe\"></p>\n","source":"_posts/viper.md","raw":"title: VIPER 架构探浅\ndate: 2014-11-24 01:06:50\ntags:\n---\n\n通常，我们会使用 MVC 来构建应用，MVC 强调代码的分层原则，按照不同的逻辑分为模型，控制器，视图 三部分，但是这是个很粗糙的分层，所以很多情况下，MVC 并没有被很好的实践，以至于 C 里面塞入了大量的代码，最后变成 Massive View Controller\n\n在 objc.io 上看到一个非常好的架构，似乎解决了这个问题\n这个架构称为 VIPER，即 视图，交互器，展示器，实体，路由。\n\n* 视图：根据展示器的要求显示界面，并将用户输入反馈给展示器。\n* 交互器：包含由用例指定的业务逻辑。\n* 展示器：包含为显示（从交互器接受的内容）做的准备工作的相关视图逻辑，并对用户输入进行反馈（从交互器获取新数据）。\n* 实体：包含交互器要使用的基本模型对象。\n* 路由：包含用来描述屏幕显示和显示顺序的导航逻辑。\n\n实际上是精心设计过的 MVC 架构，只是进行了更好的拆解。\n\n![viper-wireframe](/img/viper-wireframe.png)\n\n\n\n","slug":"viper","updated":1416763069000,"excerpt":"","_id":"tijp8lcvyt4ln5xr","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Today 扩展实战","date":1417356160000,"tags":[],"content":"<p>今天花了一下午，把Today扩展给集成到了轻卡项目里。</p>\n<p>总结一下</p>\n<ol>\n<li><p>Today 扩展可以使用 AutoLayout 来进行自动布局，并且布局过程是动画的。</p>\n</li>\n<li><p>可以通过 widgetMarginInsetsForProposedMarginInsets 代理方法来设定边界距离。</p>\n</li>\n<li><p>可以通过 preferredContentSize 来设置高度，宽度被自动忽略。</p>\n</li>\n<li><p>widgetPerformUpdateWithCompletionHandler 可以给一个后台刷新准备数据的机会，并提供系统回调。</p>\n</li>\n<li><p>扩展和主应用之间通过共享容器来数据通信，需要注意的是，共享容器在应用删除后仍然会存在。</p>\n</li>\n<li><p>扩展和主应用可以通过共享容器来分享CoreData数据，原理同上。</p>\n</li>\n<li><p>可以通过 framework，或者 CocoaPods 来分享代码。</p>\n</li>\n<li><p>如果是非 framework 方式共享代码，整个应用的体积会增大不少，因为扩展也可以认为是单独的程序。</p>\n</li>\n<li><p>大部分的API都可以被扩展所使用，扩展不能使用的一些API也相应的被标记。</p>\n</li>\n<li><ul>\n<li>(void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<uiviewcontrollertransitioncoordinator>)coordinator  是一个隐藏的方法，用来动画设置扩展高度</uiviewcontrollertransitioncoordinator></li>\n</ul>\n</li>\n</ol>\n","source":"_posts/today-extension.md","raw":"title: Today 扩展实战\ndate: 2014-11-30 22:02:40\ntags:\n---\n\n今天花了一下午，把Today扩展给集成到了轻卡项目里。\n\n总结一下\n\n1. Today 扩展可以使用 AutoLayout 来进行自动布局，并且布局过程是动画的。\n\n2. 可以通过 widgetMarginInsetsForProposedMarginInsets 代理方法来设定边界距离。\n\n3. 可以通过 preferredContentSize 来设置高度，宽度被自动忽略。\n\n4. widgetPerformUpdateWithCompletionHandler 可以给一个后台刷新准备数据的机会，并提供系统回调。\n\n5. 扩展和主应用之间通过共享容器来数据通信，需要注意的是，共享容器在应用删除后仍然会存在。\n\n6. 扩展和主应用可以通过共享容器来分享CoreData数据，原理同上。\n\n7. 可以通过 framework，或者 CocoaPods 来分享代码。\n\n8. 如果是非 framework 方式共享代码，整个应用的体积会增大不少，因为扩展也可以认为是单独的程序。\n\n9. 大部分的API都可以被扩展所使用，扩展不能使用的一些API也相应的被标记。\n\n10. - (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id<UIViewControllerTransitionCoordinator>)coordinator  是一个隐藏的方法，用来动画设置扩展高度","slug":"today-extension","updated":1417358274000,"excerpt":"","_id":"x9h9sc6pqjselum9","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"iOSCon 2014 大会整理","date":1417951066000,"tags":[],"content":"<p>周末去参加了 iOSCon 2014，前两次都是收费的，今年免费。现场大都是新面孔了，65%是2年以下的开发者。</p>\n<p>当然嘉宾也大都是老面孔，像 Tinyfool, 孔祥波。</p>\n<p>其中孔老师一改前几次大会上的风格，完全不再分享技术相关的主题，而是以改变为名讲了很多感悟，结合自己最近几年的经历有很多的共鸣之处。</p>\n<p>Tinyfool 也讲了最近做的一个很酷炫的工具，可以直接用OC来写Android程序，其中更在意的是他的创业经历，讲到了做事的方法，比如一个项目要做一年，有2000个Issue，那么一定要花时间去分解，去砍掉不必要的，在短时间内完成一个可以用的东西出来，精简成300个Issue，第一个月就做一个验证的东西出来，这是很重要的，有所为，有所不为。</p>\n<p>平安保险的蒋越也讲了做智能健康硬件的一些思路，很有启发。首先手机并不是PC的精简，而是人体器官的延伸，这个认识很重要，数据采集只是健康服务的第一步。马云的10年战略就是为了挖个坑，把所有的希望放在了85后身上，10年前85后没钱，所以只能充点Q币，买个绿钻什么的，所以淘宝亏钱，QQ赚钱，10年后。。。移动健康也遵循同样的战略，所以阿里要做健康。</p>\n<p>总体来说这次大会收获很多，期待下次iOS Con。</p>\n","source":"_posts/iOSCon.md","raw":"title: iOSCon 2014 大会整理\ndate: 2014-12-07 19:17:46\ntags:\n---\n\n周末去参加了 iOSCon 2014，前两次都是收费的，今年免费。现场大都是新面孔了，65%是2年以下的开发者。\n\n当然嘉宾也大都是老面孔，像 Tinyfool, 孔祥波。\n\n其中孔老师一改前几次大会上的风格，完全不再分享技术相关的主题，而是以改变为名讲了很多感悟，结合自己最近几年的经历有很多的共鸣之处。\n\nTinyfool 也讲了最近做的一个很酷炫的工具，可以直接用OC来写Android程序，其中更在意的是他的创业经历，讲到了做事的方法，比如一个项目要做一年，有2000个Issue，那么一定要花时间去分解，去砍掉不必要的，在短时间内完成一个可以用的东西出来，精简成300个Issue，第一个月就做一个验证的东西出来，这是很重要的，有所为，有所不为。\n\n平安保险的蒋越也讲了做智能健康硬件的一些思路，很有启发。首先手机并不是PC的精简，而是人体器官的延伸，这个认识很重要，数据采集只是健康服务的第一步。马云的10年战略就是为了挖个坑，把所有的希望放在了85后身上，10年前85后没钱，所以只能充点Q币，买个绿钻什么的，所以淘宝亏钱，QQ赚钱，10年后。。。移动健康也遵循同样的战略，所以阿里要做健康。\n\n总体来说这次大会收获很多，期待下次iOS Con。\n","slug":"iOSCon","updated":1417951807000,"excerpt":"","_id":"9hcbwkwroxpic5b2","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Swift 最佳实践","date":1418567575000,"tags":[],"content":"<p>本文内容总结自 iOSCon2014 李建中老师讲演</p>\n<h2 id=\"结构\">结构</h2>\n<p>结构是值类型，所以在任何结构传递的地方都会触发复制，需要谨慎使用</p>\n<p>不要在结构中引用 Class 这样会破坏结构体的轻量和线程安全特性<br>注：这里我还是有点异议的，在享元模式中可以非常好的套用到这个情形</p>\n<p>谨慎使用多层 Class</p>\n<h2 id=\"数组\">数组</h2>\n<p>数组和字符串具有可变成本，尽可能使用 let</p>\n<h2 id=\"对象\">对象</h2>\n<p>明确指定变量和常量类型，减少类型推断</p>\n<p>尽可能将对象声明为可选值类型，这样可以显性的去释放内存</p>\n<p>区分值相等 == != 和引用相等 === !===</p>\n<p>谨慎使用类型扩展</p>\n<p>较大自定义类型使用延迟存储属性</p>\n<p>仅在需要释放资源时才定义析构器</p>\n<p>析构过程尽可能短</p>\n<p>尽早将可选类型设置为空</p>\n<p>谨慎创建全局对象</p>\n<h2 id=\"内存管理\">内存管理</h2>\n<p>避免循环强引用</p>\n","source":"_posts/EffectiveSwift.md","raw":"title: Swift 最佳实践\ndate: 2014-12-14 22:32:55\ntags:\n---\n\n本文内容总结自 iOSCon2014 李建中老师讲演\n\n## 结构\n\n结构是值类型，所以在任何结构传递的地方都会触发复制，需要谨慎使用\n\n不要在结构中引用 Class 这样会破坏结构体的轻量和线程安全特性\n注：这里我还是有点异议的，在享元模式中可以非常好的套用到这个情形\n\n谨慎使用多层 Class\n\n## 数组\n\n数组和字符串具有可变成本，尽可能使用 let\n\n## 对象\n\n明确指定变量和常量类型，减少类型推断\n\n尽可能将对象声明为可选值类型，这样可以显性的去释放内存\n\n区分值相等 == != 和引用相等 === !===\n\n谨慎使用类型扩展\n\n较大自定义类型使用延迟存储属性\n\n仅在需要释放资源时才定义析构器\n\n析构过程尽可能短\n\n尽早将可选类型设置为空\n\n谨慎创建全局对象\n\n## 内存管理\n\n避免循环强引用\n\n\n\n","slug":"EffectiveSwift","updated":1418568585000,"excerpt":"","_id":"p44wfshqhussbxkq","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"使用Sqlite进行日期转换的黑科技","date":1419169180000,"tags":[],"content":"<p>今天看到一篇文章，不由得对人民群众的创造力大为叹服。</p>\n<p>苹果对日期的处理性能一直是让人诟病的一件事，广大机智的小伙伴也想出了很多方法去优化。比如缓存时间处理格式和对象等等。</p>\n<p>今天这个小伙伴就利用了Sqlite的日期转换功能让日期转换提高了14倍的速度。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2013<span class=\"tag\">-09-07T23</span><span class=\"pseudo\">:45</span><span class=\"pseudo\">:00Z</span></div></pre></td></tr></table></figure>\n\n<p>这就是大家熟悉的 ISO 时间，我们需要转换为 NSDate</p>\n<p>如果使用 NSFormatter 大概是这样的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSDateFormatter *inputFormatter = [[NSDateFormatter alloc] init];</div><div class=\"line\">[inputFormatter setLocale:[[[NSLocale alloc] initWithLocaleIdentifier:<span class=\"string\">@\"en_US_POSIX\"</span>] autorelease]];</div><div class=\"line\">[inputFormatter setDateFormat:format];</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *theDate = <span class=\"literal\">nil</span>;</div><div class=\"line\"><span class=\"built_in\">NSError</span> *error = <span class=\"literal\">nil</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (![inputFormatter getObjectValue:&theDate forString:string range:<span class=\"literal\">nil</span> error:&error]) {</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"ERROR! Date '%@' with '%@' could not be parsed: %@\"</span>, string, format,  error);</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">//NSDate *date = [inputFormatter dateFromString:string];</span></div><div class=\"line\">[inputFormatter release];</div></pre></td></tr></table></figure>\n\n<p>用 Sqlite 大概是这个过程</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">sqlite3_stmt *statement = <span class=\"literal\">NULL</span>;</div><div class=\"line\">sqlite3_prepare_v2(db, <span class=\"string\">\"SELECT strftime('%s', ?);\"</span>, -<span class=\"number\">1</span>, &statement, <span class=\"literal\">NULL</span>);</div><div class=\"line\"></div><div class=\"line\">sqlite3_bind_text(statement, <span class=\"number\">1</span>, [dateString UTF8String], -<span class=\"number\">1</span>, SQLITE_STATIC);</div><div class=\"line\">sqlite3_step(statement);</div><div class=\"line\">sqlite3_int64 interval = sqlite3_column_int64(statement, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"built_in\">NSDate</span> *date = [<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSince1970:interval];</div></pre></td></tr></table></figure>\n\n<p>很聪明的解法，比方法一快了14倍 ！。</p>\n","source":"_posts/data-parsing-performance.md","raw":"title: 使用Sqlite进行日期转换的黑科技\ndate: 2014-12-21 21:39:40\ntags:\n---\n今天看到一篇文章，不由得对人民群众的创造力大为叹服。\n\n苹果对日期的处理性能一直是让人诟病的一件事，广大机智的小伙伴也想出了很多方法去优化。比如缓存时间处理格式和对象等等。\n\n今天这个小伙伴就利用了Sqlite的日期转换功能让日期转换提高了14倍的速度。\n\n```\n2013-09-07T23:45:00Z\n```\n\n这就是大家熟悉的 ISO 时间，我们需要转换为 NSDate\n\n如果使用 NSFormatter 大概是这样的\n\n```\nNSDateFormatter *inputFormatter = [[NSDateFormatter alloc] init];\n[inputFormatter setLocale:[[[NSLocale alloc] initWithLocaleIdentifier:@\"en_US_POSIX\"] autorelease]];\n[inputFormatter setDateFormat:format];\nNSDate *theDate = nil;\nNSError *error = nil;\nif (![inputFormatter getObjectValue:&theDate forString:string range:nil error:&error]) {\n    NSLog(@\"ERROR! Date '%@' with '%@' could not be parsed: %@\", string, format,  error);\n}\n//NSDate *date = [inputFormatter dateFromString:string];\n[inputFormatter release];\n\n```\n\n\n用 Sqlite 大概是这个过程\n\n```\nsqlite3_stmt *statement = NULL;\nsqlite3_prepare_v2(db, \"SELECT strftime('%s', ?);\", -1, &statement, NULL);\n\nsqlite3_bind_text(statement, 1, [dateString UTF8String], -1, SQLITE_STATIC);\nsqlite3_step(statement);\nsqlite3_int64 interval = sqlite3_column_int64(statement, 0);\nNSDate *date = [NSDate dateWithTimeIntervalSince1970:interval];\n```\n\n很聪明的解法，比方法一快了14倍 ！。\n\n","slug":"data-parsing-performance","updated":1419170998000,"excerpt":"","_id":"rfnfyd8g6pmmsioa","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Swift 构造器总结","date":1419773763000,"tags":[],"content":"<p>Swift 有一个很强大的特性就是安全<br>体现在对象上就是：不允许游荡的，自由指针，如何做到的呢？构造器就可以一窥其中的思路。</p>\n<h2 id=\"基本规则\">基本规则</h2>\n<h3 id=\"Rule_1-_可以在初始化过程中修改常量值\">Rule 1. 可以在初始化过程中修改常量值</h3>\n<h3 id=\"Rule_2-_在值类型中定义指定构造器会覆盖掉默认的逐一构造器\">Rule 2. 在值类型中定义指定构造器会覆盖掉默认的逐一构造器</h3>\n<h3 id=\"Rule_3-_每一个类都必须拥有至少一个指定构造器\">Rule 3. 每一个类都必须拥有至少一个指定构造器</h3>\n<h2 id=\"构造器链\">构造器链</h2>\n<h3 id=\"Rule_4-_指定构造器必须调用其直接父类的的指定构造器\">Rule 4. 指定构造器必须调用其直接父类的的指定构造器</h3>\n<h3 id=\"Rule_5-_便利构造器必须调用同一类中定义的其它构造器\">Rule 5. 便利构造器必须调用同一类中定义的其它构造器</h3>\n<h3 id=\"Rule_6-_便利构造器必须最终以调用一个指定构造器结束\">Rule 6. 便利构造器必须最终以调用一个指定构造器结束</h3>\n<h2 id=\"两段式构造过程\">两段式构造过程</h2>\n<h3 id=\"Rule_7-_指定构造器必须保证它所在类引入的属性在它往上代理之前先完成初始化\">Rule 7. 指定构造器必须保证它所在类引入的属性在它往上代理之前先完成初始化</h3>\n<h3 id=\"Rule_8-_指定构造器必须先向上代理调用父类构造器，然后再为继承的属性设置新值\">Rule 8. 指定构造器必须先向上代理调用父类构造器，然后再为继承的属性设置新值</h3>\n<h3 id=\"Rule_9-_便利构造器必须先代理调用同一类中的其它构造器，然后再为任意属性赋新值\">Rule 9. 便利构造器必须先代理调用同一类中的其它构造器，然后再为任意属性赋新值</h3>\n<h3 id=\"Rule_10-_构造器在第一阶段构造完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用self的值\">Rule 10.  构造器在第一阶段构造完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用self的值</h3>\n<h2 id=\"构造器的继承和重载\">构造器的继承和重载</h2>\n<h3 id=\"Rule_11-_Swift_中的子类不会默认继承父类的构造器\">Rule 11. Swift 中的子类不会默认继承父类的构造器</h3>\n<h3 id=\"Rule_12-_重载构造器时你没有必要使用关键字override\">Rule 12. 重载构造器时你没有必要使用关键字override</h3>\n<h3 id=\"Rule_13-_如果子类没有定义任何指定构造器，它将自动继承所有父类的指定构造器\">Rule 13. 如果子类没有定义任何指定构造器，它将自动继承所有父类的指定构造器</h3>\n<h3 id=\"Rule_14-_如果子类提供了所有父类指定构造器的实现，它将自动继承所有父类的便利构造器\">Rule 14. 如果子类提供了所有父类指定构造器的实现，它将自动继承所有父类的便利构造器</h3>\n<h2 id=\"举几个栗子\">举几个栗子</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecipeIngredient</span>: <span class=\"title\">Food</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> quantity: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, quantity: <span class=\"type\">Int</span>) {</div><div class=\"line\">    \t<span class=\"keyword\">self</span>.quantity = quantity <span class=\"comment\">// Rule 7</span></div><div class=\"line\">\t    <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name) <span class=\"comment\">// Rule 8</span></div><div class=\"line\">\t}</div><div class=\"line\">    convenience <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) {</div><div class=\"line\">    \t<span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: name, quantity: <span class=\"number\">1</span>) <span class=\"comment\">// Rule 6</span></div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/init-coder.png\" alt=\"logo\"></p>\n<p>自从beta 6 开始，几乎所有的 UIView 类在实现 init 方法后都会报这个错误，这是 Rule 11 的体现。</p>\n","source":"_posts/swift-init.md","raw":"title: Swift 构造器总结\ndate: 2014-12-28 21:36:03\ntags:\n---\n\nSwift 有一个很强大的特性就是安全\n体现在对象上就是：不允许游荡的，自由指针，如何做到的呢？构造器就可以一窥其中的思路。\n\n## 基本规则\n\n### Rule 1. 可以在初始化过程中修改常量值\n\n### Rule 2. 在值类型中定义指定构造器会覆盖掉默认的逐一构造器\n\n### Rule 3. 每一个类都必须拥有至少一个指定构造器\n\n## 构造器链\n\n### Rule 4. 指定构造器必须调用其直接父类的的指定构造器\n\n### Rule 5. 便利构造器必须调用同一类中定义的其它构造器\n\n### Rule 6. 便利构造器必须最终以调用一个指定构造器结束\n\n## 两段式构造过程\n\n### Rule 7. 指定构造器必须保证它所在类引入的属性在它往上代理之前先完成初始化\n\n### Rule 8. 指定构造器必须先向上代理调用父类构造器，然后再为继承的属性设置新值\n\n### Rule 9. 便利构造器必须先代理调用同一类中的其它构造器，然后再为任意属性赋新值\n\n### Rule 10.  构造器在第一阶段构造完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用self的值\n\n## 构造器的继承和重载\n\n### Rule 11. Swift 中的子类不会默认继承父类的构造器\n\n### Rule 12. 重载构造器时你没有必要使用关键字override\n\n### Rule 13. 如果子类没有定义任何指定构造器，它将自动继承所有父类的指定构造器\n\n### Rule 14. 如果子类提供了所有父类指定构造器的实现，它将自动继承所有父类的便利构造器\n\n## 举几个栗子\n\n```\nclass RecipeIngredient: Food {\n    var quantity: Int\n    init(name: String, quantity: Int) {\n    \tself.quantity = quantity // Rule 7\n\t    super.init(name: name) // Rule 8\n\t}\n    convenience init(name: String) {\n    \tself.init(name: name, quantity: 1) // Rule 6\n\t}\n}\n```\n\n![logo](/img/init-coder.png)\n\n自从beta 6 开始，几乎所有的 UIView 类在实现 init 方法后都会报这个错误，这是 Rule 11 的体现。\n\n\n\n\n\n\n\n\n","slug":"swift-init","updated":1419779218000,"excerpt":"","_id":"lekmrh015scxkpaj","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"2014总结: Think Less, Do More","date":1420982619000,"tags":[],"content":"<p>眨眼间2014年就过去了，这一年发生了很多，也学到了很多。</p>\n<p>自从2012年离开互联网之后就投身到商务BI这一完全陌生的领域，和别人一起创业，自己创业，磕磕碰碰的花光最后一笔钱，然后散伙。一幕幕的场景仿佛发生在昨日。</p>\n<p>重新回到互联网行业应该是今年的大事件。尤其是移动健康领域，充满着各种可能。</p>\n<p>在过去的2年里，一直专注于组件和企业应用，实际上并不关心苹果的新技术。<br>而互联网公司却不然，对新技术的接受和应用速度非常快。</p>\n<p>这期间学习了新语言 Swift，以及 iOS 7, 8 的各种新技术譬如 HealthKit，也用Swift开发了一两个新项目，虽然遇到不少坑，但总的来说还不错。<br>iOS 8 以及 XCode 6 着实让大家郁闷了好一阵子，但是要相信苹果。</p>\n<p>开发方式也从过去的 文档驱动型开发，命令驱动型开发，转到了敏捷开发。<br>从 SVN 到 Git，从 Jira 到 Teambition，真正的把思维重新转向互联网模式。</p>\n<p>接下来的一年里，要做更多，更好的技术分享，同时逐步开源以前的一些代码，积极的参与开源项目。</p>\n<p>Think Less, Do More</p>\n","source":"_posts/2014.md","raw":"title: \"2014总结: Think Less, Do More\"\ndate: 2015-01-11 21:23:39\ntags:\n---\n\n眨眼间2014年就过去了，这一年发生了很多，也学到了很多。\n\n自从2012年离开互联网之后就投身到商务BI这一完全陌生的领域，和别人一起创业，自己创业，磕磕碰碰的花光最后一笔钱，然后散伙。一幕幕的场景仿佛发生在昨日。\n\n重新回到互联网行业应该是今年的大事件。尤其是移动健康领域，充满着各种可能。\n\n在过去的2年里，一直专注于组件和企业应用，实际上并不关心苹果的新技术。\n而互联网公司却不然，对新技术的接受和应用速度非常快。\n\n这期间学习了新语言 Swift，以及 iOS 7, 8 的各种新技术譬如 HealthKit，也用Swift开发了一两个新项目，虽然遇到不少坑，但总的来说还不错。\niOS 8 以及 XCode 6 着实让大家郁闷了好一阵子，但是要相信苹果。\n\n开发方式也从过去的 文档驱动型开发，命令驱动型开发，转到了敏捷开发。\n从 SVN 到 Git，从 Jira 到 Teambition，真正的把思维重新转向互联网模式。\n\n接下来的一年里，要做更多，更好的技术分享，同时逐步开源以前的一些代码，积极的参与开源项目。\n\nThink Less, Do More\n\n\n\n","slug":"2014","updated":1420983997000,"excerpt":"","_id":"r6qvg9jcs27qiobz","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"iOS报表技术（一）","date":1422190480000,"tags":[],"content":"<p>报表技术是一个较大的课题，我这里不准备讲的很深入，只是把最近轻卡项目用的那些给稍作分析。<br>在开发之前我们一般会把已有的功能点，以及可能会产生的功能点列出来，决定技术架构，比如轻卡这个项目体重曲线看起来可能是这样的：</p>\n<p><img src=\"/img/chart-1.png\" alt=\"1\"><br><img src=\"/img/chart-2.png\" alt=\"2\"><br><img src=\"/img/chart-3.png\" alt=\"3\"></p>\n<ul>\n<li>X轴是时间轴，Y轴是体重轴</li>\n<li>点与点之间用曲线连接，边界需要自己推算</li>\n<li>曲线与边界围成的区域需要渐变填充处理</li>\n<li>曲线数据变化会有动画过渡</li>\n<li>可以自定义Band—健康体重范围</li>\n<li>点是可以订制的，也是可以点击的</li>\n<li>坐标轴可以订制的，也是可以点击的</li>\n<li>可以在报表上做标注，气泡，图3</li>\n<li>曲线在不同的Band上可以有不同的表现，比如在正常范围是白色，其它范围是红色</li>\n<li>曲线是可以拖动的，拖动到边界后可以有一个拖拽加载更多的动画效果 图2</li>\n</ul>\n<p>可能会产生的功能点</p>\n<ul>\n<li>多重曲线，可能会有多重曲线，比如维度体重也叠加到这张报表里</li>\n<li>双Y坐标轴，或更复杂的坐标系统</li>\n<li>钻入钻出，即粒度切换，可以从每日体重，切换到每周体重，每月体重</li>\n</ul>\n<p>通过这些功能点罗列，可以采用的技术方案也基本上会确定下来</p>\n<p>比如<br>第三方的那些报表库就排除了，无法通过修改扩展满足我们的需求</p>\n<p>绘图模型，使用绘画家模式的CoreGraphic技术首先被排除了，可以选择的当然只有CALayer<br>一方面是可以充分利用GPU性能，使用苹果封装好的CoreAnimation技术，另一个事情就是层模型可以更灵活的实现遮罩效果。</p>\n<p>报表内部的数据位置计算也是一个重要的事情，假如是简单的报表当然可以直接在报表组件内部写上这些计算逻辑<br>但是涉及到坐标轴拉伸，以及多轴系统，这样的方式就非常的Low，也难以操作和维护，所以我们需要实现一个ChartSpace，来进行报表空间和绘图空间的转换，这样的好处是对报表空间的操作都封装到了ChartSpace中，坐标轴，报表图形，以及组件，都可以方便的通过这个对象来获取 “星期一”  “68公斤” 这样的数据在绘图空间的位置，而不需要进行重复的计算，所谓封装，封装的就是变化嘛 ：），另一个好处就是多轴系统可以简单的通过增加 ChartSpace 来实现，轴的拉伸和粒度钻取也变的更加的容易了。</p>\n<p><img src=\"/img/chart-4.jpg\" alt=\"4\"></p>\n<p>曲线算法，这里使用了贝塞尔曲线做平滑处理，算出穿越这一系列点的所有控制点，这也是Google的报表库CorePlot采用的算法  <a href=\"https://www.particleincell.com/2012/bezier-splines/\" target=\"_blank\" rel=\"external\">https://www.particleincell.com/2012/bezier-splines/</a><br>但是有个很大的缺陷，就是三个点之间距离比例太大，就会出现非预期的问题（图4），这一问题也通过插值算法进行了解决</p>\n<p>今天先到这里啦 ：）</p>\n","source":"_posts/chart-1.md","raw":"title: iOS报表技术（一）\ndate: 2015-01-25 20:54:40\ntags:\n---\n\n报表技术是一个较大的课题，我这里不准备讲的很深入，只是把最近轻卡项目用的那些给稍作分析。\n在开发之前我们一般会把已有的功能点，以及可能会产生的功能点列出来，决定技术架构，比如轻卡这个项目体重曲线看起来可能是这样的：\n\n![1](/img/chart-1.png)\n![2](/img/chart-2.png)\n![3](/img/chart-3.png)\n\n* X轴是时间轴，Y轴是体重轴\n* 点与点之间用曲线连接，边界需要自己推算\n* 曲线与边界围成的区域需要渐变填充处理\n* 曲线数据变化会有动画过渡\n* 可以自定义Band--健康体重范围\n* 点是可以订制的，也是可以点击的\n* 坐标轴可以订制的，也是可以点击的\n* 可以在报表上做标注，气泡，图3\n* 曲线在不同的Band上可以有不同的表现，比如在正常范围是白色，其它范围是红色\n* 曲线是可以拖动的，拖动到边界后可以有一个拖拽加载更多的动画效果 图2\n\n可能会产生的功能点\n* 多重曲线，可能会有多重曲线，比如维度体重也叠加到这张报表里\n* 双Y坐标轴，或更复杂的坐标系统\n* 钻入钻出，即粒度切换，可以从每日体重，切换到每周体重，每月体重\n\n通过这些功能点罗列，可以采用的技术方案也基本上会确定下来\n\n比如\n第三方的那些报表库就排除了，无法通过修改扩展满足我们的需求\n\n绘图模型，使用绘画家模式的CoreGraphic技术首先被排除了，可以选择的当然只有CALayer\n一方面是可以充分利用GPU性能，使用苹果封装好的CoreAnimation技术，另一个事情就是层模型可以更灵活的实现遮罩效果。\n\n报表内部的数据位置计算也是一个重要的事情，假如是简单的报表当然可以直接在报表组件内部写上这些计算逻辑\n但是涉及到坐标轴拉伸，以及多轴系统，这样的方式就非常的Low，也难以操作和维护，所以我们需要实现一个ChartSpace，来进行报表空间和绘图空间的转换，这样的好处是对报表空间的操作都封装到了ChartSpace中，坐标轴，报表图形，以及组件，都可以方便的通过这个对象来获取 “星期一”  “68公斤” 这样的数据在绘图空间的位置，而不需要进行重复的计算，所谓封装，封装的就是变化嘛 ：），另一个好处就是多轴系统可以简单的通过增加 ChartSpace 来实现，轴的拉伸和粒度钻取也变的更加的容易了。\n\n\n![4](/img/chart-4.jpg)\n\n曲线算法，这里使用了贝塞尔曲线做平滑处理，算出穿越这一系列点的所有控制点，这也是Google的报表库CorePlot采用的算法  https://www.particleincell.com/2012/bezier-splines/ \n但是有个很大的缺陷，就是三个点之间距离比例太大，就会出现非预期的问题（图4），这一问题也通过插值算法进行了解决\n\n今天先到这里啦 ：）\n\n\n\n\n","slug":"chart-1","updated":1422193423000,"excerpt":"","_id":"udx81t2lk0h2bixz","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"iOS报表技术（二）","date":1422794650000,"tags":[],"content":"<p>这周我们讲讲如何使用层模型来绘图，和绘画家模型（Canvas）不同，绘画家的图是静态的，所以只要安排好画每一笔的顺序就好了<br>每一笔都叠在已画好的上面，画布只有一层</p>\n<p><img src=\"/img/jack.png\" alt=\"\"></p>\n<p>CALayer 的层模型更进一步，把不同图层的对象区分开来，这样就有了更加灵活的和可复用的绘图手法</p>\n<p><img src=\"/img/jack-layers1.png\" alt=\"\"></p>\n<p>我们的报表也采用这种模型，从最底到最上我们就可以区分出这么几层</p>\n<ul>\n<li>背景层</li>\n<li>BAND层</li>\n<li>轴，包括装饰用的<ul>\n<li>轴标注</li>\n</ul>\n</li>\n<li>渐变填充层<ul>\n<li>完整渐变</li>\n<li>渐变遮罩层</li>\n</ul>\n</li>\n<li>线层<ul>\n<li>正常线</li>\n<li>超出范围的线<ul>\n<li>完整的线</li>\n<li>范围遮罩层</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>点层</li>\n<li>标注层</li>\n</ul>\n<p><img src=\"/img/chart-1.png\" alt=\"曲线\"></p>\n<p>我们就用了这样 7个主图层，7个辅助图层，最终描出了所需的报表，图层之间大多是（半）透明，因此会产生图层的混合运算，这是由GPU完成的，可以不担心性能，当然，关闭其中不必要的透明图层可以提高性能。</p>\n<p>有同学可能对一条线能够在不同范围表现出不同的色彩感到很惊奇，觉得没法用画布画出来，其实不然，人的视觉是带有惯性的，所以不能以这种思维去思考问题，我们在计算机层面上很容易理解这个问题，首先画出一条红线，然后再画一条白线，把范围外的白线都切掉，然后叠在红线上，不就形成了所需要的效果吗？ 不需要你一口气去画出红白相间的线的。</p>\n<p>在层模型上，剪切就可以用层遮罩代替，所以上面可以看到两个遮罩层，是用来裁剪所需范围的图层的。</p>\n<p>今天就到这里，下次继续~！</p>\n","source":"_posts/chart-2.md","raw":"title: iOS报表技术（二）\ndate: 2015-02-01 20:44:10\ntags:\n---\n\n这周我们讲讲如何使用层模型来绘图，和绘画家模型（Canvas）不同，绘画家的图是静态的，所以只要安排好画每一笔的顺序就好了\n每一笔都叠在已画好的上面，画布只有一层\n\n![](/img/jack.png)\n\nCALayer 的层模型更进一步，把不同图层的对象区分开来，这样就有了更加灵活的和可复用的绘图手法\n\n![](/img/jack-layers1.png)\n\n我们的报表也采用这种模型，从最底到最上我们就可以区分出这么几层\n\n* 背景层\n* BAND层\n* 轴，包括装饰用的\n\t* 轴标注\n* 渐变填充层\n\t* 完整渐变\n\t* 渐变遮罩层\n* 线层\n\t* 正常线\n\t* 超出范围的线\n\t\t* 完整的线\n\t\t* 范围遮罩层\n* 点层\n* 标注层\n\n![曲线](/img/chart-1.png)\n\n我们就用了这样 7个主图层，7个辅助图层，最终描出了所需的报表，图层之间大多是（半）透明，因此会产生图层的混合运算，这是由GPU完成的，可以不担心性能，当然，关闭其中不必要的透明图层可以提高性能。\n\n\n有同学可能对一条线能够在不同范围表现出不同的色彩感到很惊奇，觉得没法用画布画出来，其实不然，人的视觉是带有惯性的，所以不能以这种思维去思考问题，我们在计算机层面上很容易理解这个问题，首先画出一条红线，然后再画一条白线，把范围外的白线都切掉，然后叠在红线上，不就形成了所需要的效果吗？ 不需要你一口气去画出红白相间的线的。\n\n在层模型上，剪切就可以用层遮罩代替，所以上面可以看到两个遮罩层，是用来裁剪所需范围的图层的。\n\n今天就到这里，下次继续~！\n","slug":"chart-2","updated":1422797034000,"excerpt":"","_id":"slcl5mknw935rm9t","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"iOS报表技术（三）","date":1423391568000,"tags":[],"content":"<p>这次讲讲曲线的生成，曲线生成有好几种方法，这里使用贝塞尔曲线，也即谷歌的开源报表库 CorePlot 使用的方法</p>\n<p><a href=\"https://www.particleincell.com/2012/bezier-splines/\" target=\"_blank\" rel=\"external\">https://www.particleincell.com/2012/bezier-splines/</a></p>\n<p>这一方法的核心是算出所有控制点</p>\n<p><img src=\"/img/chart-5.png\" alt=\"控制点\"></p>\n<p>从上图可以看到控制点才是曲线的灵魂，关于贝塞尔曲线的更多内容这里不在赘述，大家可以看百科。</p>\n<p>这样就引发了一个问题，当几个点的间距比例过大就会出现“过量”问题，画出的曲线不是很正常</p>\n<p><img src=\"/img/chart-4.jpg\" alt=\"过量\"></p>\n<p>解决的方法非常简单，就是通过在比例较大的两点之间做一条直线，在这条直线上虚拟几个数据点作为辅助，如此就解决了问题</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">CGFloat</span> k = deltaY / deltaX;</div><div class=\"line\"><span class=\"built_in\">CGFloat</span> startX = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> ( startX &lt; deltaX ) {</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> currentPoint = CGPointMake(firstX + startX, round(firstY + k * startX));</div><div class=\"line\">    [interpolationPoints addObject:[NSValue valueWithCGPoint:currentPoint]];</div><div class=\"line\">    startX += interploation;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/chart-3.md","raw":"title: iOS报表技术（三）\ndate: 2015-02-08 18:32:48\ntags:\n---\n\n这次讲讲曲线的生成，曲线生成有好几种方法，这里使用贝塞尔曲线，也即谷歌的开源报表库 CorePlot 使用的方法\n\nhttps://www.particleincell.com/2012/bezier-splines/\n\n这一方法的核心是算出所有控制点\n\n![控制点](/img/chart-5.png)\n\n从上图可以看到控制点才是曲线的灵魂，关于贝塞尔曲线的更多内容这里不在赘述，大家可以看百科。\n\n这样就引发了一个问题，当几个点的间距比例过大就会出现“过量”问题，画出的曲线不是很正常\n\n![过量](/img/chart-4.jpg)\n\n解决的方法非常简单，就是通过在比例较大的两点之间做一条直线，在这条直线上虚拟几个数据点作为辅助，如此就解决了问题\n\n```Objective-C\nCGFloat k = deltaY / deltaX;\nCGFloat startX = 0;\nwhile ( startX < deltaX ) {\n    CGPoint currentPoint = CGPointMake(firstX + startX, round(firstY + k * startX));\n    [interpolationPoints addObject:[NSValue valueWithCGPoint:currentPoint]];\n    startX += interploation;\n}\n```\n\n","slug":"chart-3","updated":1423393926000,"excerpt":"","_id":"j8o7n77k8rcs7lb4","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"BHAPI设计 (一)","date":1425823255000,"tags":[],"content":"<p>之前做轻卡的时候完全设计了新的API接口调用方式，经过了2个APP的实践，从可用到好用也迭代了几个版本</p>\n<p>BHAPI 从设计之初就有了以下几个目标：</p>\n<ol>\n<li><p>自由更换网络框架，安全，无痛</p>\n</li>\n<li><p>自动的缓存处理机制，灵活，可靠</p>\n</li>\n<li><p>中间层代码由机器生成，而机器不会犯错，所以代码是高质量的</p>\n</li>\n<li><p>可以方便的伪造假数据用于开发阶段测试</p>\n</li>\n<li><p>Design（即ViewModel）可以在页面销毁时自动cancel掉网络请求</p>\n</li>\n<li><p>全局的错误处理，Loading显示，断线重连，进入前台时自动刷新</p>\n</li>\n</ol>\n<p>总结起来就是，傻瓜，智能</p>\n<p>如今上述几个目标大致完成，所以也打上了 1.0 的 Tag，2.0主要是加入函数响应式编程支持。</p>\n<p>从这周开始就逐步的介绍一下整个设计是如何解决这些问题的。</p>\n","source":"_posts/BHAPI-Desgin-01.md","raw":"title: BHAPI设计 (一)\ndate: 2015-03-08 22:00:55\ntags:\n---\n\n之前做轻卡的时候完全设计了新的API接口调用方式，经过了2个APP的实践，从可用到好用也迭代了几个版本\n\nBHAPI 从设计之初就有了以下几个目标：\n\n1. 自由更换网络框架，安全，无痛\n\n2. 自动的缓存处理机制，灵活，可靠\n\n3. 中间层代码由机器生成，而机器不会犯错，所以代码是高质量的\n\n4. 可以方便的伪造假数据用于开发阶段测试\n\n5. Design（即ViewModel）可以在页面销毁时自动cancel掉网络请求\n\n6. 全局的错误处理，Loading显示，断线重连，进入前台时自动刷新\n\n总结起来就是，傻瓜，智能\n\n如今上述几个目标大致完成，所以也打上了 1.0 的 Tag，2.0主要是加入函数响应式编程支持。\n\n从这周开始就逐步的介绍一下整个设计是如何解决这些问题的。","slug":"BHAPI-Desgin-01","updated":1425823815000,"excerpt":"","_id":"p3kfbx04t80bdt85","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"BHAPI设计 (二)","date":1426433770000,"tags":[],"content":"<h4 id=\"缓存系统的设计\">缓存系统的设计</h4>\n<p>BHAPI 使用了 MKNetworkKit 作为通讯框架。</p>\n<p>MKNetworkKit 的缓存策略相当简单：</p>\n<ol>\n<li>MKNetworkEngine 通过 useCache 作为缓存使用与否的总开关；</li>\n<li>一旦开启缓存总开关，MKNetworkOperation 还能够通过 shouldNotCacheResponse 来控制某个请求是否使用缓存；</li>\n<li>缓存激活后，每次请求的结果都会被存在本地文件中，以 UUID 命名；</li>\n<li>每次请求都会携带 Etag 访问服务器，由 304 等状态码来确定缓存的失效与否；</li>\n</ol>\n<p>在薄荷的项目中，曾经使用了 MK 的这种缓存方式，但是带来了一些问题，原因在于每次请求后不论服务器返回与否都会发生第一次回调，这次回调会把预先产生的文件缓存作为返回数据，接下来进行真正的请求回调，如果不是 304 那么会再次返回一次数据，这样在一些场景下，缓存就导致了奇怪的问题，比如动态刷出了两个一模一样的。</p>\n<p>实际上我们期望的是这样的：假如请求返回的状态码是 304，那么就只返回缓存数据，假如不是，那么就只返回新数据。<br>这样看起来是合理的，但是很多场景下还是需要在服务器返回前提供占位数据，这样就不难理解 MK 这样做的初衷。</p>\n<p>所以 BHAPI 就统和这两种需求，增加了两个控制缓存的开关，useCache 和 usePlaceHolder</p>\n<ol>\n<li>useCache = false 不用缓存</li>\n<li>useCache = true &amp; usePlaceHolder = false 使用缓存，但是需要服务器返回缓存状态后才返回</li>\n<li>useCache = true &amp; usePlaceHolder = true  服务器未返回时就使用文件缓存进行占位</li>\n</ol>\n<p>Done !</p>\n","source":"_posts/BHAPI-Design-02.md","raw":"title: BHAPI设计 (二)\ndate: 2015-03-15 23:36:10\ntags:\n---\n\n#### 缓存系统的设计\n\nBHAPI 使用了 MKNetworkKit 作为通讯框架。\n\nMKNetworkKit 的缓存策略相当简单：\n1. MKNetworkEngine 通过 useCache 作为缓存使用与否的总开关；\n2. 一旦开启缓存总开关，MKNetworkOperation 还能够通过 shouldNotCacheResponse 来控制某个请求是否使用缓存；\n3. 缓存激活后，每次请求的结果都会被存在本地文件中，以 UUID 命名；\n4. 每次请求都会携带 Etag 访问服务器，由 304 等状态码来确定缓存的失效与否；\n\n在薄荷的项目中，曾经使用了 MK 的这种缓存方式，但是带来了一些问题，原因在于每次请求后不论服务器返回与否都会发生第一次回调，这次回调会把预先产生的文件缓存作为返回数据，接下来进行真正的请求回调，如果不是 304 那么会再次返回一次数据，这样在一些场景下，缓存就导致了奇怪的问题，比如动态刷出了两个一模一样的。\n\n实际上我们期望的是这样的：假如请求返回的状态码是 304，那么就只返回缓存数据，假如不是，那么就只返回新数据。\n这样看起来是合理的，但是很多场景下还是需要在服务器返回前提供占位数据，这样就不难理解 MK 这样做的初衷。\n\n所以 BHAPI 就统和这两种需求，增加了两个控制缓存的开关，useCache 和 usePlaceHolder\n\n1. useCache = false 不用缓存\n2. useCache = true & usePlaceHolder = false 使用缓存，但是需要服务器返回缓存状态后才返回\n3. useCache = true & usePlaceHolder = true  服务器未返回时就使用文件缓存进行占位\n\nDone !\n\n\n\n","slug":"BHAPI-Design-02","updated":1426435096000,"excerpt":"","_id":"2hwgkml6vz09ihpf","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"RACSignal操作详解(一)","date":1427624847000,"tags":[],"content":"<p>RACSignal 作为 函数响应式编程中的重要概念，它的相关操作非常值得深入研究</p>\n<h3 id=\"行为注入\">行为注入</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pp\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>doNext:<span class=\"params\">(void (^)</span><span class=\"params\">(id x)</span>)block;</span></div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>doError:<span class=\"params\">(void (^)</span><span class=\"params\">(<span class=\"variable\">NSError</span> *error)</span>)block;</div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>doCompleted:<span class=\"params\">(void (^)</span><span class=\"params\">(void)</span>)block;</div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>initially:<span class=\"params\">(void (^)</span><span class=\"params\">(void)</span>)block;</div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>finally:<span class=\"params\">(void (^)</span><span class=\"params\">(void)</span>)block;</div></pre></td></tr></table></figure>\n\n<h3 id=\"时机操作\">时机操作</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pp\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>throttle:<span class=\"params\">(<span class=\"variable\">NSTimeInterval</span>)</span>interval;</span></div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>throttle:<span class=\"params\">(<span class=\"variable\">NSTimeInterval</span>)</span>interval valuesPassingTest:<span class=\"params\">(<span class=\"variable\">BOOL</span> (^)</span><span class=\"params\">(id next)</span>)predicate;</div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>delay:<span class=\"params\">(<span class=\"variable\">NSTimeInterval</span>)</span>interval;</div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>repeat;</div></pre></td></tr></table></figure>\n\n<h3 id=\"蓄积\">蓄积</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pp\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>bufferWithTime:<span class=\"params\">(<span class=\"variable\">NSTimeInterval</span>)</span>interval onScheduler:<span class=\"params\">(<span class=\"variable\">RACScheduler</span> *)</span>scheduler;</span></div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>collect;</div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>takeLast:<span class=\"params\">(<span class=\"variable\">NSUInteger</span>)</span>count;</div></pre></td></tr></table></figure>\n\n<h3 id=\"合并\">合并</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"pp\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>combineLatestWith:<span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>signal;</span></div><div class=\"line\"></div><div class=\"line\">+ <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>combineLatest:<span class=\"params\">(id&lt;<span class=\"variable\">NSFastEnumeration</span>&gt;)</span>signals;</div><div class=\"line\"></div><div class=\"line\">+ <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>combineLatest:<span class=\"params\">(id&lt;<span class=\"variable\">NSFastEnumeration</span>&gt;)</span>signals reduce:<span class=\"params\">(id (^)</span><span class=\"params\">()</span>)reduceBlock;</div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>merge:<span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>signal;</div><div class=\"line\"></div><div class=\"line\">+ <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>merge:<span class=\"params\">(id&lt;<span class=\"variable\">NSFastEnumeration</span>&gt;)</span>signals;</div><div class=\"line\"></div><div class=\"line\">- <span class=\"params\">(<span class=\"variable\">RACSignal</span> *)</span>flatten:<span class=\"params\">(<span class=\"variable\">NSUInteger</span>)</span>maxConcurrent;</div></pre></td></tr></table></figure>\n\n","source":"_posts/rac-operations-1.md","raw":"title: RACSignal操作详解(一)\ndate: 2015-03-29 18:27:27\ntags:\n---\n\nRACSignal 作为 函数响应式编程中的重要概念，它的相关操作非常值得深入研究\n\n### 行为注入\n\n```\n- (RACSignal *)doNext:(void (^)(id x))block;\n\n- (RACSignal *)doError:(void (^)(NSError *error))block;\n\n- (RACSignal *)doCompleted:(void (^)(void))block;\n\n- (RACSignal *)initially:(void (^)(void))block;\n\n- (RACSignal *)finally:(void (^)(void))block;\n```\n\n### 时机操作\n\n```\n- (RACSignal *)throttle:(NSTimeInterval)interval;\n\n- (RACSignal *)throttle:(NSTimeInterval)interval valuesPassingTest:(BOOL (^)(id next))predicate;\n\n- (RACSignal *)delay:(NSTimeInterval)interval;\n\n- (RACSignal *)repeat;\n```\n\n### 蓄积\n\n```\n- (RACSignal *)bufferWithTime:(NSTimeInterval)interval onScheduler:(RACScheduler *)scheduler;\n\n- (RACSignal *)collect;\n\n- (RACSignal *)takeLast:(NSUInteger)count;\n```\n\n### 合并\n\n```\n- (RACSignal *)combineLatestWith:(RACSignal *)signal;\n\n+ (RACSignal *)combineLatest:(id<NSFastEnumeration>)signals;\n\n+ (RACSignal *)combineLatest:(id<NSFastEnumeration>)signals reduce:(id (^)())reduceBlock;\n\n- (RACSignal *)merge:(RACSignal *)signal;\n\n+ (RACSignal *)merge:(id<NSFastEnumeration>)signals;\n\n- (RACSignal *)flatten:(NSUInteger)maxConcurrent;\n```\n\n\n\n\n","slug":"rac-operations-1","updated":1427633693000,"excerpt":"","_id":"famh36dewjtsrydc","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"使用classy订制UI样式","date":1430047827000,"tags":[],"content":"<p>苹果的 UIApprearance 给予了我们一个统一订制样式的方案，但实际上在很多情况下并不好用。</p>\n<p>在 UIApprearance 之前实际上已经有一个机智的小伙伴写了个叫 NUI 的类库，里面的原理也很简单，用类CSS定义样式，用HOOK大法劫持住系统的 moveToWindow 等方法，然后使用Visitor（Render）去装修我们的View等元素，整个类库安全无污染，放进去就能用。</p>\n<p>之后又有了很多类似的库，较有影响力的 Classy 就是今天的主角，把玩了一番后觉得很有意思。</p>\n<p>Classy 定义样式的语法相当简单，但又非常强大。</p>\n<p>支持常量</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$main</span>-color = <span class=\"comment\">#35a3ee</span></div><div class=\"line\"><span class=\"variable\">$background</span>-color = <span class=\"comment\">#f4f4f4</span></div><div class=\"line\"><span class=\"variable\">$nav</span>-background-color = <span class=\"comment\">#fcfcfb</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$warm</span>-gray-color = <span class=\"comment\">#dfdfdf</span></div><div class=\"line\"><span class=\"variable\">$light</span>-gray-color = <span class=\"comment\">#999999</span></div><div class=\"line\"><span class=\"variable\">$normal</span>-gray-color = <span class=\"comment\">#666666</span></div><div class=\"line\"><span class=\"variable\">$dark</span>-gray-color = <span class=\"comment\">#333333</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$h1</span> = <span class=\"number\">36</span></div><div class=\"line\"><span class=\"variable\">$h2</span> = <span class=\"number\">30</span></div><div class=\"line\"><span class=\"variable\">$h3</span> = <span class=\"number\">24</span></div><div class=\"line\"><span class=\"variable\">$h4</span> = <span class=\"number\">18</span></div><div class=\"line\"><span class=\"variable\">$h5</span> = <span class=\"number\">14</span></div><div class=\"line\"><span class=\"variable\">$h6</span> = <span class=\"number\">12</span></div></pre></td></tr></table></figure>\n\n<p>父类匹配，所有父类为 UIViewController 的 ViewController 的 View (有点绕。。)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">^UIViewController &gt;</span> <span class=\"constant\">UIView</span> {</span></div><div class=\"line\">\tbackground-<span class=\"symbol\">color:</span> <span class=\"variable\">$background</span>-color</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>嵌套对象样式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIButton.return_current {</div><div class=\"line\">\tbackground-color: clear</div><div class=\"line\">\tlayer: @{</div><div class=\"line\">\t\tcorner-radius: 12</div><div class=\"line\">\t\tborder-width: 1</div><div class=\"line\">\t\tborder-color: $main-color</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>text attributes 支持，简直神了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">UINavigationBar {</div><div class=\"line\">\ttin-<span class=\"keyword\">color</span>: <span class=\"variable\">$main</span>-<span class=\"keyword\">color</span></div><div class=\"line\">\tbackground-<span class=\"keyword\">color</span>: <span class=\"variable\">$nav</span>-background-<span class=\"keyword\">color</span></div><div class=\"line\">\ttranslucent: NO</div><div class=\"line\">\ttitle-<span class=\"keyword\">text</span>-attributes: @{</div><div class=\"line\">\t\tfont: <span class=\"variable\">$title</span>-font</div><div class=\"line\">\t\tforeground-<span class=\"keyword\">color</span>: <span class=\"variable\">$dark</span>-gray-<span class=\"keyword\">color</span></div><div class=\"line\">\t\tshadow: @{</div><div class=\"line\">\t\t\tshadow-offset: <span class=\"number\">0</span>, -<span class=\"number\">1</span></div><div class=\"line\">\t\t\tshadow-<span class=\"keyword\">color</span>: <span class=\"keyword\">clear</span></div><div class=\"line\">\t\t}</div><div class=\"line\">\t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>Live Reload</p>\n<p>实时加载修改，给设计妹子演示的时候，妹子看的很开心啊。</p>\n<p>一些懒人必备的语法，帮助样式的复用，不得不佩服作者的巧妙心思。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">UICollectionView {</div><div class=\"line\">  <span class=\"attribute\">background-color</span> <span class=\"id\">#a2a2a2</span></div><div class=\"line\">  </div><div class=\"line\">  &gt; UICollectionViewCell {</div><div class=\"line\">    clips-to-bounds NO</div><div class=\"line\">    </div><div class=\"line\">    UILabel {</div><div class=\"line\">      <span class=\"value\">text</span>-<span class=\"attribute\">color</span> purple</div><div class=\"line\">      </div><div class=\"line\">      &<span class=\"class\">.title</span> {</div><div class=\"line\">        <span class=\"attribute\">font</span> 20</div><div class=\"line\">      }</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>当然并不局限于样式，一些订制的功能还需要深入挖掘。</p>\n","source":"_posts/classy-intro.md","raw":"title: 使用classy订制UI样式\ndate: 2015-04-26 19:30:27\ntags:\n---\n\n苹果的 UIApprearance 给予了我们一个统一订制样式的方案，但实际上在很多情况下并不好用。\n\n在 UIApprearance 之前实际上已经有一个机智的小伙伴写了个叫 NUI 的类库，里面的原理也很简单，用类CSS定义样式，用HOOK大法劫持住系统的 moveToWindow 等方法，然后使用Visitor（Render）去装修我们的View等元素，整个类库安全无污染，放进去就能用。\n\n之后又有了很多类似的库，较有影响力的 Classy 就是今天的主角，把玩了一番后觉得很有意思。\n\nClassy 定义样式的语法相当简单，但又非常强大。\n\n支持常量\n\n```\n$main-color = #35a3ee\n$background-color = #f4f4f4\n$nav-background-color = #fcfcfb\n\n$warm-gray-color = #dfdfdf\n$light-gray-color = #999999\n$normal-gray-color = #666666\n$dark-gray-color = #333333\n\n$h1 = 36\n$h2 = 30\n$h3 = 24\n$h4 = 18\n$h5 = 14\n$h6 = 12\n```\n\n父类匹配，所有父类为 UIViewController 的 ViewController 的 View (有点绕。。)\n\n```\n^UIViewController > UIView {\n\tbackground-color: $background-color\n}\n```\n\n嵌套对象样式\n\n```\nUIButton.return_current {\n\tbackground-color: clear\n\tlayer: @{\n\t\tcorner-radius: 12\n\t\tborder-width: 1\n\t\tborder-color: $main-color\n\t}\n}\n```\n\ntext attributes 支持，简直神了\n\n```\nUINavigationBar {\n\ttin-color: $main-color\n\tbackground-color: $nav-background-color\n\ttranslucent: NO\n\ttitle-text-attributes: @{\n\t\tfont: $title-font\n\t\tforeground-color: $dark-gray-color\n\t\tshadow: @{\n\t\t\tshadow-offset: 0, -1\n\t\t\tshadow-color: clear\n\t\t}\n\t}\n}\n\n```\n\nLive Reload\n\n实时加载修改，给设计妹子演示的时候，妹子看的很开心啊。\n\n一些懒人必备的语法，帮助样式的复用，不得不佩服作者的巧妙心思。\n\n```\nUICollectionView {\n  background-color #a2a2a2\n  \n  > UICollectionViewCell {\n    clips-to-bounds NO\n    \n    UILabel {\n      text-color purple\n      \n      &.title {\n        font 20\n      }\n    }\n  }\n}\n```\n\n当然并不局限于样式，一些订制的功能还需要深入挖掘。\n\n\n\n\n\n\n\n\n","slug":"classy-intro","updated":1430049330000,"excerpt":"","_id":"nwhuq4c1occ1aufh","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"开始学习Ruby","date":1430657005000,"tags":[],"content":"<p>一年学习一门新语言是个好习惯，去年是红的发紫的 Swift，今年则是Ruby。</p>\n<p>为什么要学Ruby?</p>\n<ol>\n<li>Ruby可以作为工作的自动化脚本工具，合理使用可以极大的提高工作效率。</li>\n<li>Ruby有非常好的DSL能力，可以更好的实践元编程，有很强的创造力。</li>\n<li>Swift 和 Ruby 有非常多的相似之处，事半功倍</li>\n<li>公司有很好的Ruby氛围。</li>\n</ol>\n<p>目前整理了几本书，慢慢看</p>\n<ol>\n<li>《Programming Ruby》</li>\n<li>《Ruby从入门到精通》</li>\n<li>《松本行宏的程序世界》</li>\n<li>《Ruby Under a Microscope》</li>\n</ol>\n<p>文档工具<br>Dash + Alfred</p>\n<p>文本工具<br>Textmate/Sublime</p>\n<p>看了《Programming Ruby》前两章，做了下笔记：</p>\n<p>Ruby 有一个很好用的交互式控制台 irb</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">%ruby</span></div><div class=\"line\">puts <span class=\"string\">\"Hello world\"</span></div><div class=\"line\">^<span class=\"variable\">D</span></div><div class=\"line\"><span class=\"variable\">Hello</span> world</div></pre></td></tr></table></figure>\n\n<h4 id=\"constructor\">constructor</h4>\n<p>和 Swift 的 init 方法一样，Ruby的对象使用 new 构造器进行初始化。</p>\n<h4 id=\"Method\">Method</h4>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> </span>say_goodnight(name)</div><div class=\"line\">\tresult = <span class=\"string\">\"Good night, \"</span> + name</div><div class=\"line\">\t<span class=\"keyword\">return</span> result</div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n\n<p>默认的，方法内带有一个隐藏参数 result，这个特性 object-pasical 也有</p>\n<p>语句不需要分号结尾，懒人福音，这也是 Ruby 的哲学所在，能少写代码，就尽量少写。代码越少，意味着思维越清楚。</p>\n<p>表达式插值 expression interpolation</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">result</span> = <span class=\"string\">\"Good night, #{name}\"</span></div></pre></td></tr></table></figure>\n\n<p>怎么样，想起 Swift 了吧 :)</p>\n<h4 id=\"变量\">变量</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$greeting</span> = <span class=\"string\">\"hello\"</span> <span class=\"comment\"># 全局变量</span></div><div class=\"line\"><span class=\"variable\">@name</span> = <span class=\"string\">\"Prudence\"</span>  <span class=\"comment\"># 实例变量</span></div><div class=\"line\"><span class=\"variable\">@@hello</span> = <span class=\"string\">\"hello\"</span> \t<span class=\"comment\"># 类变量</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"数组\">数组</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"string\">'cat'</span>, <span class=\"number\">3.14</span>, <span class=\"keyword\">nil</span>]</div></pre></td></tr></table></figure>\n\n<p>这里的 nil 和 Swift 一样，并不是空地址 （0x00000000）而是一个用来指示空的对象。</p>\n<p>快捷创建字符串数组</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = [ <span class=\"string\">'ant'</span>, <span class=\"string\">'bee'</span>, <span class=\"string\">'cat'</span>, <span class=\"string\">'dog'</span>, <span class=\"string\">'elk'</span>]</div><div class=\"line\"><span class=\"comment\"># 等价于</span></div><div class=\"line\">a = <span class=\"string\">%w( ant bee cat dog elk )</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"字典\">字典</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">inst_section = {</div><div class=\"line\">\t<span class=\"string\">'cello'</span> =&gt; <span class=\"string\">'string'</span>,</div><div class=\"line\">\t<span class=\"string\">'oboe'</span> \t=&gt; <span class=\"string\">'woodwind'</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>如果键对应的值为空，则返回nil<br>如果希望默认值为0，则可以</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">histogram </span>=<span class=\"string\"> Hash.new(0)</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"控制结构\">控制结构</h4>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">if count &gt;</span> <span class=\"number\">10</span></span></div><div class=\"line\">\tputs <span class=\"string\">\"try again\"</span></div><div class=\"line\"><span class=\"keyword\">elsif</span> tries == <span class=\"number\">3</span></div><div class=\"line\">\tputs <span class=\"string\">\"you lose\"</span></div><div class=\"line\"><span class=\"keyword\">else</span> </div><div class=\"line\">\tputs <span class=\"string\">\"enter a number\"</span></div><div class=\"line\"><span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> weight &lt; <span class=\"number\">100</span> <span class=\"keyword\">and</span> num_pallets &lt;= <span class=\"number\">30</span></div><div class=\"line\">\tpallet = next_pallet()</div><div class=\"line\">\tweight += pallet.weight</div><div class=\"line\">\tnum_pallets += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">end</span></div></pre></td></tr></table></figure>\n\n<p>语句修饰符 statement modifiers</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> radiation &gt; <span class=\"number\">3000</span></div><div class=\"line\">\tputs <span class=\"string\">\"Danger, Will Robinson\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">end</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 等价于</span></div><div class=\"line\"></div><div class=\"line\">puts <span class=\"string\">\"Danger, Will Robinson\"</span> <span class=\"keyword\">if</span> radiation &gt; <span class=\"number\">3000</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"正则表达式\">正则表达式</h4>\n<p>Ruby内建正则支持，所以具有强大的文本处理能力</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">line</span> =~ /Perl|Python/</div><div class=\"line\">\tputs <span class=\"string\">\"...\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">end</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">line</span>.sub(/Perl/, <span class=\"string\">'Ruby'</span>)  <span class=\"comment\"># 替换第一个匹配的</span></div><div class=\"line\"><span class=\"built_in\">line</span>.gsub(/Python/, <span class=\"string\">'Ruby'</span>) <span class=\"comment\"># 替换所有的</span></div></pre></td></tr></table></figure>\n\n<h4 id=\"Block,_迭代器\">Block, 迭代器</h4>\n<p>花括号活着 do..end 都可以包裹一段代码作为 Block</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">{ puts <span class=\"string\">\"Hello\"</span> }</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">do</span></div><div class=\"line\">\tclub.enroll(person)</div><div class=\"line\">\tperson.socialize</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">end</span></span></div></pre></td></tr></table></figure>\n\n<p>有点类似 Swift 的尾行闭包，最后一个参数假如是 block, 则可以写在方法执行体外面作为参数进行传递，而 Ruby 则称为 方法关联，协同例程 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">animals = %w( <span class=\"keyword\">ant</span> bee cat dog elk )</div><div class=\"line\">animals.<span class=\"keyword\">each</span> { |animal| puts animal }</div></pre></td></tr></table></figure>\n\n<p>再看看 each 方法</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">def <span class=\"keyword\">each</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"keyword\">each</span> <span class=\"keyword\">element</span> <span class=\"comment\"># 伪代码</span></div><div class=\"line\">\t\tyield(<span class=\"keyword\">element</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">end</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">end</span></span></div></pre></td></tr></table></figure>\n\n","source":"_posts/study-ruby.md","raw":"title: 开始学习Ruby\ndate: 2015-05-03 20:43:25\ntags:\n---\n\n一年学习一门新语言是个好习惯，去年是红的发紫的 Swift，今年则是Ruby。\n\n为什么要学Ruby?\n1. Ruby可以作为工作的自动化脚本工具，合理使用可以极大的提高工作效率。\n2. Ruby有非常好的DSL能力，可以更好的实践元编程，有很强的创造力。\n3. Swift 和 Ruby 有非常多的相似之处，事半功倍\n4. 公司有很好的Ruby氛围。\n\n目前整理了几本书，慢慢看\n1. 《Programming Ruby》\n2. 《Ruby从入门到精通》\n3. 《松本行宏的程序世界》\n4. 《Ruby Under a Microscope》\n\n文档工具\nDash + Alfred\n\n文本工具\nTextmate/Sublime\n\n看了《Programming Ruby》前两章，做了下笔记：\n\nRuby 有一个很好用的交互式控制台 irb\n\n```\n%ruby\nputs \"Hello world\"\n^D\nHello world\n```\n\n#### constructor\n和 Swift 的 init 方法一样，Ruby的对象使用 new 构造器进行初始化。\n\n#### Method\n\n```ruby\ndef say_goodnight(name)\n\tresult = \"Good night, \" + name\n\treturn result\nend\n```\n\n默认的，方法内带有一个隐藏参数 result，这个特性 object-pasical 也有\n\n语句不需要分号结尾，懒人福音，这也是 Ruby 的哲学所在，能少写代码，就尽量少写。代码越少，意味着思维越清楚。\n\n表达式插值 expression interpolation\n\n```\nresult = \"Good night, #{name}\"\n```\n\n怎么样，想起 Swift 了吧 :)\n\n#### 变量\n\n```\n$greeting = \"hello\" # 全局变量\n@name = \"Prudence\"  # 实例变量\n@@hello = \"hello\" \t# 类变量\n```\n\n#### 数组\n\n```\na = [1, 'cat', 3.14, nil]\n```\n\n这里的 nil 和 Swift 一样，并不是空地址 （0x00000000）而是一个用来指示空的对象。\n\n快捷创建字符串数组\n\n```ruby\na = [ 'ant', 'bee', 'cat', 'dog', 'elk']\n# 等价于\na = %w( ant bee cat dog elk )\n```\n\n#### 字典\n\n```\ninst_section = {\n\t'cello' => 'string',\n\t'oboe' \t=> 'woodwind'\n}\n```\n\n如果键对应的值为空，则返回nil\n如果希望默认值为0，则可以\n\n```\nhistogram = Hash.new(0)\n```\n\n#### 控制结构\n\n```ruby\nif count > 10\n\tputs \"try again\"\nelsif tries == 3\n\tputs \"you lose\"\nelse \n\tputs \"enter a number\"\nend\n\nwhile weight < 100 and num_pallets <= 30\n\tpallet = next_pallet()\n\tweight += pallet.weight\n\tnum_pallets += 1\nend\n```\n\n语句修饰符 statement modifiers\n\n```\nif radiation > 3000\n\tputs \"Danger, Will Robinson\"\nend\n\n# 等价于\n\nputs \"Danger, Will Robinson\" if radiation > 3000\n\n```\n\n#### 正则表达式\n\nRuby内建正则支持，所以具有强大的文本处理能力\n\n```\nif line =~ /Perl|Python/\n\tputs \"...\"\nend\n\nline.sub(/Perl/, 'Ruby')  # 替换第一个匹配的\nline.gsub(/Python/, 'Ruby') # 替换所有的\n```\n\n#### Block, 迭代器\n\n花括号活着 do..end 都可以包裹一段代码作为 Block\n\n```\n{ puts \"Hello\" }\n\ndo\n\tclub.enroll(person)\n\tperson.socialize\nend\n```\n\n有点类似 Swift 的尾行闭包，最后一个参数假如是 block, 则可以写在方法执行体外面作为参数进行传递，而 Ruby 则称为 方法关联，协同例程 \n\n```\nanimals = %w( ant bee cat dog elk )\nanimals.each { |animal| puts animal }\n```\n再看看 each 方法\n\n```\ndef each\n\tfor each element # 伪代码\n\t\tyield(element)\n\tend\nend\n```\n\n\n","slug":"study-ruby","updated":1430662279000,"excerpt":"","_id":"fwokmnsfrgz2576w","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"XCode","_id":"v2ios7x8x4gpxzbc","posts":["ntaoe33ezgsp7tfd"]},{"name":"Swift ReactiveCocoa","_id":"tvrd3hprvc2vvx4b","posts":["vu1tzjzy4kk5aus8"]}]}