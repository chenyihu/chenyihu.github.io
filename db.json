{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"source/img/xcode-fixme.png","path":"img/xcode-fixme.png","modified":false},{"_id":"source/img/xcode-mark.png","path":"img/xcode-mark.png","modified":false},{"_id":"source/img/xcode-todo.png","path":"img/xcode-todo.png","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1411612893000},{"_id":"scaffolds/page.md","mtime":1411612893000},{"_id":"scaffolds/photo.md","mtime":1411612893000},{"_id":"scaffolds/post.md","mtime":1411612893000},{"_id":"source/_posts/hello-world.md","mtime":1411612893000},{"_id":"themes/landscape/Gruntfile.js","mtime":1411612893000},{"_id":"themes/landscape/LICENSE","mtime":1411612893000},{"_id":"themes/landscape/README.md","mtime":1411612893000},{"_id":"themes/landscape/_config.yml","mtime":1411612893000},{"_id":"themes/landscape/package.json","mtime":1411612893000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1411612893000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/category.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/index.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/page.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/post.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1411612893000},{"_id":"themes/landscape/source/js/script.js","mtime":1411612893000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/style.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1411612893000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1411612893000},{"_id":"source/_posts/first-blog.md","mtime":1411612893000},{"_id":"source/img/xcode-fixme.png","mtime":1411612893000},{"_id":"source/img/xcode-mark.png","mtime":1411612893000},{"_id":"source/img/xcode-todo.png","mtime":1411612893000},{"_id":"source/_posts/swift-mark.md","mtime":1411612893000},{"_id":"source/_posts/swift-rac.md","mtime":1411901725000},{"_id":"source/_posts/swift-rac2.md","mtime":1413119353000}],"Category":[],"Page":[],"Post":[{"title":"Hello World","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick_Start\">Quick Start</h2>\n<h3 id=\"Create_a_new_post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run_server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate_static_files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy_to_remote_sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)","slug":"hello-world","date":1411612893000,"updated":1411612893000,"excerpt":"","_id":"xvdfpkgwknvcqn9w","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"开写博客了","date":1411239247000,"tags":[],"content":"<p>如题。</p>\n","source":"_posts/first-blog.md","raw":"title: 开写博客了\ndate: 2014-09-21 02:54:07\ntags:\n---\n\n如题。\n\n","slug":"first-blog","updated":1411612893000,"excerpt":"","_id":"j4qas4awtztmfan9","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Swift 中的标记","date":1411320430000,"tags":["v2ios7x8x4gpxzbc"],"content":"<p>在 Objective-C 中 我们使用 #pragma mark 来分割代码，并且使IDE支持跳转</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#pragma mark – Initialization </span></div><div class=\"line\">code <span class=\"keyword\">here</span>...</div><div class=\"line\"> </div><div class=\"line\"><span class=\"preprocessor\">#pragma mark – Table Management</span></div><div class=\"line\">more code <span class=\"keyword\">here</span>...</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/xcode-mark.png\" alt=\"xcode-mark\"></p>\n<p>那么在 Swift 中我们如何实现类似的效果呢？<br>答案是 // MARK: 这个 XCode6 新引入的特性</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// MARK: - Initialization</span></div><div class=\"line\">code here...</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// MARK: - View Management</span></div><div class=\"line\">more code here...</div></pre></td></tr></table></figure>\n\n<p>在 Swift 中我们同样也可以使用 // TODO: 以及 // FIXME:</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"func\"><span class=\"keyword\">func</span></span> viewDidLoad()</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">super</span>.viewDidLoad()</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// TODO: add configuration code</span></div><div class=\"line\">  <span class=\"keyword\">self</span>.configureView()</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/xcode-todo.png\" alt=\"xcode-todo\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"comment\">// FIXME: bug 2102</span></div><div class=\"line\">  <span class=\"keyword\">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class=\"string\">\"Cell\"</span>, forIndexPath: indexPath) <span class=\"keyword\">as</span> UITableViewCell</div><div class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">object</span> = objects[indexPath.row] <span class=\"keyword\">as</span> NSDate</div><div class=\"line\">  cell.textLabel.text = <span class=\"keyword\">object</span>.description</div><div class=\"line\">  <span class=\"keyword\">return</span> cell</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/xcode-fixme.png\" alt=\"xcode-fixme\"></p>\n","source":"_posts/swift-mark.md","raw":"title: Swift 中的标记\ndate: 2014-09-22 01:27:10\ntags: XCode\n---\n\n在 Objective-C 中 我们使用 #pragma mark 来分割代码，并且使IDE支持跳转\n\n```Objective-C\n#pragma mark – Initialization \ncode here...\n \n#pragma mark – Table Management\nmore code here...\n```\n\n![xcode-mark](/img/xcode-mark.png)\n\n那么在 Swift 中我们如何实现类似的效果呢？\n答案是 // MARK: 这个 XCode6 新引入的特性\n\n```Swift\n// MARK: - Initialization\ncode here...\n \n// MARK: - View Management\nmore code here...\n\n```\n\n在 Swift 中我们同样也可以使用 // TODO: 以及 // FIXME:\n\n```Swift\noverride func viewDidLoad()\n{\n  super.viewDidLoad()\n \n  // TODO: add configuration code\n  self.configureView()\n}\n```\n\n![xcode-todo](/img/xcode-todo.png)\n\n```\noverride func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell\n{\n  // FIXME: bug 2102\n  let cell = tableView.dequeueReusableCellWithIdentifier(\"Cell\", forIndexPath: indexPath) as UITableViewCell\n  let object = objects[indexPath.row] as NSDate\n  cell.textLabel.text = object.description\n  return cell\n}\n```\n\n![xcode-fixme](/img/xcode-fixme.png)","slug":"swift-mark","updated":1411612893000,"excerpt":"","_id":"ntaoe33ezgsp7tfd","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"在 Swift 项目中集成 ReactiveCocoa (一)","date":1411898847000,"tags":["tvrd3hprvc2vvx4b"],"content":"<h2 id=\"安装_ReactiveCocoa\">安装 ReactiveCocoa</h2>\n<p>最简单的就是使用 Cocoapods 了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">pod</span> <span class=\"string\">'ReactiveCocoa'</span></div></pre></td></tr></table></figure>\n\n<p>但是由于 ReactiveCocoa 目前尚未对 Swift 做原生支持，所以我们需要使用桥接的模式来使用。把 #import <reactivecocoa reactivecocoa.h=\"\"> 放入 Briging Header。然后我们就可以开心的使用啦。</reactivecocoa></p>\n<h2 id=\"Sequence\">Sequence</h2>\n<p>ReactiveCocoa 对 ObjC 容器类提供了 Sequence 扩展。如下</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">RACSignal *letters = [<span class=\"string\">@\"A B C D E F G H I\"</span> componentsSeparatedByString:<span class=\"string\">@\" \"</span>]<span class=\"variable\">.rac_sequence</span><span class=\"variable\">.signal</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 依次输出 A B C D…</span></div><div class=\"line\">[letters subscribeNext:^(<span class=\"built_in\">NSString</span> *x) {</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, x);</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p>但是到了 Swift 世界，Array 和 NSArray 就分道扬镳了，虽然可以相互转换，但是 NSArray 的扩展，Array 是不能用的，所以就有了下面的代码</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> signal = <span class=\"type\">NSArray</span>(array: <span class=\"string\">\"A B C D\"</span>.componentsSeparatedByString(<span class=\"string\">\" \"</span>)).rac_sequence.signal()</div><div class=\"line\">signal.subscribeNext { (a) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"built_in\">println</span>(a)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"Signals\">Signals</h2>\n<p>由于 Signal 在 OC 中一直返回的是 id 类型，如下</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.signal</span> subscribeNext:^(<span class=\"keyword\">id</span> x) {</div><div class=\"line\">  <span class=\"built_in\">NSString</span> *text = (<span class=\"built_in\">NSString</span> *)x;</div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(text);</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p>id 类型在 OC 中可谓是万能类型，可以随意的转换和发消息。<br>但是 Swift 号称类型安全，就不能这样了，要实现上面的代码，在 Swift 中可能是这样的</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">self</span>.signal.subscribeNext {</div><div class=\"line\">  (next:<span class=\"type\">AnyObject</span>!) -&gt; () <span class=\"keyword\">in</span></div><div class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text = next <span class=\"keyword\">as</span>? <span class=\"type\">String</span> {</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"built_in\">countElements</span>(text))</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>但我们的武器箱里又多了一把武器，泛型。</p>\n<p>通过泛型，我们实现一个 RACSignal 的扩展，让其支持任意类型的转换。</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">RACSignal</span> </span>{  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> subscribeNextAs&lt;<span class=\"type\">T</span>&gt;(nextClosure:(<span class=\"type\">T</span>) -&gt; ()) -&gt; () {</div><div class=\"line\">    <span class=\"keyword\">self</span>.subscribeNext {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; () <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      nextClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>使用 subscribeNextAs 我们甚至可以写出比 OC 更好的代码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">self</span><span class=\"class\">.signal</span><span class=\"class\">.subscribeNextAs</span> <span class=\"rules\">{</span></div><div class=\"line\">  <span class=\"rule\">(<span class=\"attribute\">text</span>:<span class=\"value\">String) -&gt; () in</span></span></div><div class=\"line\">  <span class=\"function\">println</span>(<span class=\"function\">countElements</span>(text))</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>今天到这里，未完待续…</p>\n","source":"_posts/swift-rac.md","raw":"title: 在 Swift 项目中集成 ReactiveCocoa (一)\ndate: 2014-09-28 18:07:27\ntags: Swift ReactiveCocoa\n\n---\n\n## 安装 ReactiveCocoa \n\n最简单的就是使用 Cocoapods 了。\n\n```\npod 'ReactiveCocoa'\n```\n\n但是由于 ReactiveCocoa 目前尚未对 Swift 做原生支持，所以我们需要使用桥接的模式来使用。把 #import <ReactiveCocoa/ReactiveCocoa.h> 放入 Briging Header。然后我们就可以开心的使用啦。\n\n## Sequence\n\nReactiveCocoa 对 ObjC 容器类提供了 Sequence 扩展。如下\n\n```Objective-C\nRACSignal *letters = [@\"A B C D E F G H I\" componentsSeparatedByString:@\" \"].rac_sequence.signal;\n\n// 依次输出 A B C D…\n[letters subscribeNext:^(NSString *x) {\n    NSLog(@\"%@\", x);\n}];\n```\n\n但是到了 Swift 世界，Array 和 NSArray 就分道扬镳了，虽然可以相互转换，但是 NSArray 的扩展，Array 是不能用的，所以就有了下面的代码\n\n```Swift\n    var signal = NSArray(array: \"A B C D\".componentsSeparatedByString(\" \")).rac_sequence.signal()\n    signal.subscribeNext { (a) -> Void in\n        println(a)\n    }\n```\n\n## Signals\n\n由于 Signal 在 OC 中一直返回的是 id 类型，如下\n\n```Objective-C\n[self.signal subscribeNext:^(id x) {\n  NSString *text = (NSString *)x;\n  NSLog(text);\n}];\n```\n\nid 类型在 OC 中可谓是万能类型，可以随意的转换和发消息。\n但是 Swift 号称类型安全，就不能这样了，要实现上面的代码，在 Swift 中可能是这样的\n\n```Swift\n\nself.signal.subscribeNext {\n  (next:AnyObject!) -> () in\n  if let text = next as? String {\n    println(countElements(text))\n  }\n}\n\n```\n\n但我们的武器箱里又多了一把武器，泛型。\n\n通过泛型，我们实现一个 RACSignal 的扩展，让其支持任意类型的转换。\n\n```Swift\nextension RACSignal {  \n  func subscribeNextAs<T>(nextClosure:(T) -> ()) -> () {\n    self.subscribeNext {\n      (next: AnyObject!) -> () in\n      let nextAsT = next as T\n      nextClosure(nextAsT)\n    }\n  }\n}\n```\n\n使用 subscribeNextAs 我们甚至可以写出比 OC 更好的代码\n\n```\nself.signal.subscribeNextAs {\n  (text:String) -> () in\n  println(countElements(text))\n}\n```\n\n今天到这里，未完待续...\n\n\n\n\n\n\n\n\n\n","slug":"swift-rac","updated":1411901725000,"excerpt":"","_id":"vu1tzjzy4kk5aus8","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"在 Swift 项目中集成 ReactiveCocoa (二)","date":1413117534000,"tags":[],"content":"<h2 id=\"Signals\">Signals</h2>\n<p>当然，类似于 subscribeNextAs，其它一些操作的 Swift 版本</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">RACSignal</span> </span>{</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> mapAs&lt;<span class=\"type\">T</span>: <span class=\"type\">AnyObject</span>, <span class=\"type\">U</span>: <span class=\"type\">AnyObject</span>&gt;(mapClosure:(<span class=\"type\">T</span>) -&gt; <span class=\"type\">U</span>) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.<span class=\"built_in\">map</span> {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; <span class=\"type\">AnyObject</span>! <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      <span class=\"keyword\">return</span> mapClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> filterAs&lt;<span class=\"type\">T</span>: <span class=\"type\">AnyObject</span>&gt;(filterClosure:(<span class=\"type\">T</span>) -&gt; <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.<span class=\"built_in\">filter</span> {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      <span class=\"keyword\">return</span> filterClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> doNextAs&lt;<span class=\"type\">T</span>: <span class=\"type\">AnyObject</span>&gt;(nextClosure:(<span class=\"type\">T</span>) -&gt; ()) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.doNext {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; () <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      nextClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>Signal 之间可以联动，如下 </p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RAC(<span class=\"keyword\">self</span><span class=\"variable\">.submitButton</span><span class=\"variable\">.enabled</span>) = [RACSignal combineLatest:@[<span class=\"keyword\">self</span><span class=\"variable\">.usernameField</span><span class=\"variable\">.rac_textSignal</span>, <span class=\"keyword\">self</span><span class=\"variable\">.passwordField</span><span class=\"variable\">.rac_textSignal</span>] reduce:^<span class=\"keyword\">id</span>(<span class=\"built_in\">NSString</span> *userName, <span class=\"built_in\">NSString</span> *password) {</div><div class=\"line\">    <span class=\"keyword\">return</span> @(userName<span class=\"variable\">.length</span> &gt;= <span class=\"number\">6</span> && password<span class=\"variable\">.length</span> &gt;= <span class=\"number\">6</span>);</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p>但是 Swift 中不能使用复杂的宏，所以需要把宏转换为一个结构体</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RAC</span>  </span>{</div><div class=\"line\">  <span class=\"keyword\">var</span> target : <span class=\"type\">NSObject</span>!</div><div class=\"line\">  <span class=\"keyword\">var</span> keyPath : <span class=\"type\">String</span>!</div><div class=\"line\">  <span class=\"keyword\">var</span> nilValue : <span class=\"type\">AnyObject</span>!</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"number\">_</span> target: <span class=\"type\">NSObject</span>!, <span class=\"number\">_</span> keyPath: <span class=\"type\">String</span>, nilValue: <span class=\"type\">AnyObject</span>? = <span class=\"built_in\">nil</span>) {</div><div class=\"line\">    <span class=\"keyword\">self</span>.target = target</div><div class=\"line\">    <span class=\"keyword\">self</span>.keyPath = keyPath</div><div class=\"line\">    <span class=\"keyword\">self</span>.nilValue = nilValue</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> assignSignal(signal : <span class=\"type\">RACSignal</span>) {</div><div class=\"line\">    signal.setKeyPath(<span class=\"keyword\">self</span>.keyPath, onObject: <span class=\"keyword\">self</span>.target, nilValue: <span class=\"keyword\">self</span>.nilValue)</div><div class=\"line\">  }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> ~&gt; {}</div><div class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span></span> ~&gt; (signal: <span class=\"type\">RACSignal</span>, rac: <span class=\"type\">RAC</span>) {</div><div class=\"line\">  rac.assignSignal(signal)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这样我们就可以很容易写出 Swift 的 RAC 版本</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">searchTextField.rac_textSignal() ~&gt; <span class=\"type\">RAC</span>(viewModel, <span class=\"string\">\"searchText\"</span>)</div></pre></td></tr></table></figure>\n\n<p>Combining latest values</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RACSignalEx</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">class</span> <span class=\"func\"><span class=\"keyword\">func</span></span> combineLatestAs&lt;<span class=\"type\">T</span>, <span class=\"type\">U</span>, <span class=\"type\">R</span>: <span class=\"type\">AnyObject</span>&gt;(signals:[<span class=\"type\">RACSignal</span>], <span class=\"built_in\">reduce</span>:(<span class=\"type\">T</span>,<span class=\"type\">U</span>) -&gt; <span class=\"type\">R</span>) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">RACSignal</span>.combineLatest(signals).mapAs {</div><div class=\"line\">      (tuple: <span class=\"type\">RACTuple</span>) -&gt; <span class=\"type\">R</span> <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">reduce</span>(tuple.first <span class=\"keyword\">as</span> <span class=\"type\">T</span>, tuple.second <span class=\"keyword\">as</span> <span class=\"type\">U</span>)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">RACSignalEx</span>.combineLatestAs([favouritesSignal, commentsSignal]) {</div><div class=\"line\">      (favourites:<span class=\"type\">NSString</span>, comments:<span class=\"type\">NSString</span>) -&gt; <span class=\"type\">FlickrPhotoMetadata</span> <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">FlickrPhotoMetadata</span>(favourites: favourites.integerValue, comments: comments.integerValue)</div><div class=\"line\">    }</div></pre></td></tr></table></figure>\n\n<p>RACObserve 监听属性的改变，使用block的KVO</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span></span> <span class=\"type\">RACObserve</span>(target: <span class=\"type\">NSObject</span>!, keyPath: <span class=\"type\">String</span>) -&gt; <span class=\"type\">RACSignal</span>  {</div><div class=\"line\">  <span class=\"keyword\">return</span> target.rac_valuesForKeyPath(keyPath, observer: target)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> validSearchSignal = <span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>, <span class=\"string\">\"searchText\"</span>).mapAs {</div><div class=\"line\">    (text: <span class=\"type\">NSString</span>) -&gt; <span class=\"type\">NSNumber</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">return</span> text.length &gt; <span class=\"number\">3</span></div><div class=\"line\">  }.distinctUntilChanged();</div></pre></td></tr></table></figure>\n\n","source":"_posts/swift-rac2.md","raw":"title: 在 Swift 项目中集成 ReactiveCocoa (二)\ndate: 2014-10-12 20:38:54\ntags:\n---\n\n## Signals\n\n当然，类似于 subscribeNextAs，其它一些操作的 Swift 版本\n\n```Swift\nextension RACSignal {\n  \n  func mapAs<T: AnyObject, U: AnyObject>(mapClosure:(T) -> U) -> RACSignal {\n    return self.map {\n      (next: AnyObject!) -> AnyObject! in\n      let nextAsT = next as T\n      return mapClosure(nextAsT)\n    }\n  }\n  \n  func filterAs<T: AnyObject>(filterClosure:(T) -> Bool) -> RACSignal {\n    return self.filter {\n      (next: AnyObject!) -> Bool in\n      let nextAsT = next as T\n      return filterClosure(nextAsT)\n    }\n  }\n  \n  func doNextAs<T: AnyObject>(nextClosure:(T) -> ()) -> RACSignal {\n    return self.doNext {\n      (next: AnyObject!) -> () in\n      let nextAsT = next as T\n      nextClosure(nextAsT)\n    }\n  }\n}\n```\n\nSignal 之间可以联动，如下 \n\n```Objective-C\nRAC(self.submitButton.enabled) = [RACSignal combineLatest:@[self.usernameField.rac_textSignal, self.passwordField.rac_textSignal] reduce:^id(NSString *userName, NSString *password) {\n    return @(userName.length >= 6 && password.length >= 6);\n}];\n```\n\n但是 Swift 中不能使用复杂的宏，所以需要把宏转换为一个结构体\n\n```Swift\nstruct RAC  {\n  var target : NSObject!\n  var keyPath : String!\n  var nilValue : AnyObject!\n  \n  init(_ target: NSObject!, _ keyPath: String, nilValue: AnyObject? = nil) {\n    self.target = target\n    self.keyPath = keyPath\n    self.nilValue = nilValue\n  }\n  \n  \n  func assignSignal(signal : RACSignal) {\n    signal.setKeyPath(self.keyPath, onObject: self.target, nilValue: self.nilValue)\n  }\n}\n\ninfix operator ~> {}\nfunc ~> (signal: RACSignal, rac: RAC) {\n  rac.assignSignal(signal)\n}\n```\n\n这样我们就可以很容易写出 Swift 的 RAC 版本\n\n```Swift\nsearchTextField.rac_textSignal() ~> RAC(viewModel, \"searchText\")\n```\n\nCombining latest values\n\n```Swift\nclass RACSignalEx {\n  class func combineLatestAs<T, U, R: AnyObject>(signals:[RACSignal], reduce:(T,U) -> R) -> RACSignal {\n    return RACSignal.combineLatest(signals).mapAs {\n      (tuple: RACTuple) -> R in\n      return reduce(tuple.first as T, tuple.second as U)\n    }\n  }\n}\n```\n\n```Swift\nRACSignalEx.combineLatestAs([favouritesSignal, commentsSignal]) {\n      (favourites:NSString, comments:NSString) -> FlickrPhotoMetadata in\n      return FlickrPhotoMetadata(favourites: favourites.integerValue, comments: comments.integerValue)\n    }\n```\n\nRACObserve 监听属性的改变，使用block的KVO\n\n```Swift\nfunc RACObserve(target: NSObject!, keyPath: String) -> RACSignal  {\n  return target.rac_valuesForKeyPath(keyPath, observer: target)\n}\n```\n\n```Swift\nlet validSearchSignal = RACObserve(self, \"searchText\").mapAs {\n    (text: NSString) -> NSNumber in\n    return text.length > 3\n  }.distinctUntilChanged();\n```","slug":"swift-rac2","updated":1413119353000,"excerpt":"","_id":"s5abjojbaxy2t4ju","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"XCode","_id":"v2ios7x8x4gpxzbc","posts":["ntaoe33ezgsp7tfd"]},{"name":"Swift ReactiveCocoa","_id":"tvrd3hprvc2vvx4b","posts":["vu1tzjzy4kk5aus8"]}]}