{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"source/img/xcode-fixme.png","path":"img/xcode-fixme.png","modified":false},{"_id":"source/img/xcode-mark.png","path":"img/xcode-mark.png","modified":false},{"_id":"source/img/xcode-todo.png","path":"img/xcode-todo.png","modified":false},{"_id":"source/img/asyncdisplaykit-logo.png","path":"img/asyncdisplaykit-logo.png","modified":false},{"_id":"source/img/asyncdisplaykit-node.png","path":"img/asyncdisplaykit-node.png","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1411612893000},{"_id":"scaffolds/page.md","mtime":1411612893000},{"_id":"scaffolds/photo.md","mtime":1411612893000},{"_id":"scaffolds/post.md","mtime":1411612893000},{"_id":"source/_posts/hello-world.md","mtime":1411612893000},{"_id":"themes/landscape/Gruntfile.js","mtime":1411612893000},{"_id":"themes/landscape/LICENSE","mtime":1411612893000},{"_id":"themes/landscape/README.md","mtime":1411612893000},{"_id":"themes/landscape/_config.yml","mtime":1411612893000},{"_id":"themes/landscape/package.json","mtime":1411612893000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1411612893000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/category.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/index.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/page.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/post.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1411612893000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1411612893000},{"_id":"themes/landscape/source/js/script.js","mtime":1411612893000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/style.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1411612893000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1411612893000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1411612893000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1411612893000},{"_id":"source/_posts/first-blog.md","mtime":1411612893000},{"_id":"source/img/xcode-fixme.png","mtime":1411612893000},{"_id":"source/img/xcode-mark.png","mtime":1411612893000},{"_id":"source/img/xcode-todo.png","mtime":1411612893000},{"_id":"source/_posts/swift-mark.md","mtime":1411612893000},{"_id":"source/_posts/swift-rac.md","mtime":1411901725000},{"_id":"source/_posts/swift-rac2.md","mtime":1413119353000},{"_id":"source/_posts/asyncdisplaykit.md","mtime":1413741225000},{"_id":"source/img/asyncdisplaykit-logo.png","mtime":1413739761000},{"_id":"source/img/asyncdisplaykit-node.png","mtime":1413741174000},{"_id":"source/_posts/asyncdisplaykit2.md","mtime":1414341603000},{"_id":"source/_posts/use-mantle.md","mtime":1414969886000}],"Category":[],"Page":[],"Post":[{"title":"Hello World","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick_Start\">Quick Start</h2>\n<h3 id=\"Create_a_new_post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run_server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate_static_files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy_to_remote_sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)","slug":"hello-world","date":1411612893000,"updated":1411612893000,"excerpt":"","_id":"xvdfpkgwknvcqn9w","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"开写博客了","date":1411239247000,"tags":[],"content":"<p>如题。</p>\n","source":"_posts/first-blog.md","raw":"title: 开写博客了\ndate: 2014-09-21 02:54:07\ntags:\n---\n\n如题。\n\n","slug":"first-blog","updated":1411612893000,"excerpt":"","_id":"j4qas4awtztmfan9","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Swift 中的标记","date":1411320430000,"tags":["v2ios7x8x4gpxzbc"],"content":"<p>在 Objective-C 中 我们使用 #pragma mark 来分割代码，并且使IDE支持跳转</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#pragma mark – Initialization </span></div><div class=\"line\">code <span class=\"keyword\">here</span>...</div><div class=\"line\"> </div><div class=\"line\"><span class=\"preprocessor\">#pragma mark – Table Management</span></div><div class=\"line\">more code <span class=\"keyword\">here</span>...</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/xcode-mark.png\" alt=\"xcode-mark\"></p>\n<p>那么在 Swift 中我们如何实现类似的效果呢？<br>答案是 // MARK: 这个 XCode6 新引入的特性</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// MARK: - Initialization</span></div><div class=\"line\">code here...</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// MARK: - View Management</span></div><div class=\"line\">more code here...</div></pre></td></tr></table></figure>\n\n<p>在 Swift 中我们同样也可以使用 // TODO: 以及 // FIXME:</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"func\"><span class=\"keyword\">func</span></span> viewDidLoad()</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"keyword\">super</span>.viewDidLoad()</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// TODO: add configuration code</span></div><div class=\"line\">  <span class=\"keyword\">self</span>.configureView()</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/xcode-todo.png\" alt=\"xcode-todo\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"comment\">// FIXME: bug 2102</span></div><div class=\"line\">  <span class=\"keyword\">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class=\"string\">\"Cell\"</span>, forIndexPath: indexPath) <span class=\"keyword\">as</span> UITableViewCell</div><div class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">object</span> = objects[indexPath.row] <span class=\"keyword\">as</span> NSDate</div><div class=\"line\">  cell.textLabel.text = <span class=\"keyword\">object</span>.description</div><div class=\"line\">  <span class=\"keyword\">return</span> cell</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><img src=\"/img/xcode-fixme.png\" alt=\"xcode-fixme\"></p>\n","source":"_posts/swift-mark.md","raw":"title: Swift 中的标记\ndate: 2014-09-22 01:27:10\ntags: XCode\n---\n\n在 Objective-C 中 我们使用 #pragma mark 来分割代码，并且使IDE支持跳转\n\n```Objective-C\n#pragma mark – Initialization \ncode here...\n \n#pragma mark – Table Management\nmore code here...\n```\n\n![xcode-mark](/img/xcode-mark.png)\n\n那么在 Swift 中我们如何实现类似的效果呢？\n答案是 // MARK: 这个 XCode6 新引入的特性\n\n```Swift\n// MARK: - Initialization\ncode here...\n \n// MARK: - View Management\nmore code here...\n\n```\n\n在 Swift 中我们同样也可以使用 // TODO: 以及 // FIXME:\n\n```Swift\noverride func viewDidLoad()\n{\n  super.viewDidLoad()\n \n  // TODO: add configuration code\n  self.configureView()\n}\n```\n\n![xcode-todo](/img/xcode-todo.png)\n\n```\noverride func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell\n{\n  // FIXME: bug 2102\n  let cell = tableView.dequeueReusableCellWithIdentifier(\"Cell\", forIndexPath: indexPath) as UITableViewCell\n  let object = objects[indexPath.row] as NSDate\n  cell.textLabel.text = object.description\n  return cell\n}\n```\n\n![xcode-fixme](/img/xcode-fixme.png)","slug":"swift-mark","updated":1411612893000,"excerpt":"","_id":"ntaoe33ezgsp7tfd","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"在 Swift 项目中集成 ReactiveCocoa (一)","date":1411898847000,"tags":["tvrd3hprvc2vvx4b"],"content":"<h2 id=\"安装_ReactiveCocoa\">安装 ReactiveCocoa</h2>\n<p>最简单的就是使用 Cocoapods 了。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">pod</span> <span class=\"string\">'ReactiveCocoa'</span></div></pre></td></tr></table></figure>\n\n<p>但是由于 ReactiveCocoa 目前尚未对 Swift 做原生支持，所以我们需要使用桥接的模式来使用。把 #import <reactivecocoa reactivecocoa.h=\"\"> 放入 Briging Header。然后我们就可以开心的使用啦。</reactivecocoa></p>\n<h2 id=\"Sequence\">Sequence</h2>\n<p>ReactiveCocoa 对 ObjC 容器类提供了 Sequence 扩展。如下</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">RACSignal *letters = [<span class=\"string\">@\"A B C D E F G H I\"</span> componentsSeparatedByString:<span class=\"string\">@\" \"</span>]<span class=\"variable\">.rac_sequence</span><span class=\"variable\">.signal</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 依次输出 A B C D…</span></div><div class=\"line\">[letters subscribeNext:^(<span class=\"built_in\">NSString</span> *x) {</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, x);</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p>但是到了 Swift 世界，Array 和 NSArray 就分道扬镳了，虽然可以相互转换，但是 NSArray 的扩展，Array 是不能用的，所以就有了下面的代码</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> signal = <span class=\"type\">NSArray</span>(array: <span class=\"string\">\"A B C D\"</span>.componentsSeparatedByString(<span class=\"string\">\" \"</span>)).rac_sequence.signal()</div><div class=\"line\">signal.subscribeNext { (a) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"built_in\">println</span>(a)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"Signals\">Signals</h2>\n<p>由于 Signal 在 OC 中一直返回的是 id 类型，如下</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.signal</span> subscribeNext:^(<span class=\"keyword\">id</span> x) {</div><div class=\"line\">  <span class=\"built_in\">NSString</span> *text = (<span class=\"built_in\">NSString</span> *)x;</div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(text);</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p>id 类型在 OC 中可谓是万能类型，可以随意的转换和发消息。<br>但是 Swift 号称类型安全，就不能这样了，要实现上面的代码，在 Swift 中可能是这样的</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">self</span>.signal.subscribeNext {</div><div class=\"line\">  (next:<span class=\"type\">AnyObject</span>!) -&gt; () <span class=\"keyword\">in</span></div><div class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text = next <span class=\"keyword\">as</span>? <span class=\"type\">String</span> {</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"built_in\">countElements</span>(text))</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>但我们的武器箱里又多了一把武器，泛型。</p>\n<p>通过泛型，我们实现一个 RACSignal 的扩展，让其支持任意类型的转换。</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">RACSignal</span> </span>{  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> subscribeNextAs&lt;<span class=\"type\">T</span>&gt;(nextClosure:(<span class=\"type\">T</span>) -&gt; ()) -&gt; () {</div><div class=\"line\">    <span class=\"keyword\">self</span>.subscribeNext {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; () <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      nextClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>使用 subscribeNextAs 我们甚至可以写出比 OC 更好的代码</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">self</span><span class=\"class\">.signal</span><span class=\"class\">.subscribeNextAs</span> <span class=\"rules\">{</span></div><div class=\"line\">  <span class=\"rule\">(<span class=\"attribute\">text</span>:<span class=\"value\">String) -&gt; () in</span></span></div><div class=\"line\">  <span class=\"function\">println</span>(<span class=\"function\">countElements</span>(text))</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>今天到这里，未完待续…</p>\n","source":"_posts/swift-rac.md","raw":"title: 在 Swift 项目中集成 ReactiveCocoa (一)\ndate: 2014-09-28 18:07:27\ntags: Swift ReactiveCocoa\n\n---\n\n## 安装 ReactiveCocoa \n\n最简单的就是使用 Cocoapods 了。\n\n```\npod 'ReactiveCocoa'\n```\n\n但是由于 ReactiveCocoa 目前尚未对 Swift 做原生支持，所以我们需要使用桥接的模式来使用。把 #import <ReactiveCocoa/ReactiveCocoa.h> 放入 Briging Header。然后我们就可以开心的使用啦。\n\n## Sequence\n\nReactiveCocoa 对 ObjC 容器类提供了 Sequence 扩展。如下\n\n```Objective-C\nRACSignal *letters = [@\"A B C D E F G H I\" componentsSeparatedByString:@\" \"].rac_sequence.signal;\n\n// 依次输出 A B C D…\n[letters subscribeNext:^(NSString *x) {\n    NSLog(@\"%@\", x);\n}];\n```\n\n但是到了 Swift 世界，Array 和 NSArray 就分道扬镳了，虽然可以相互转换，但是 NSArray 的扩展，Array 是不能用的，所以就有了下面的代码\n\n```Swift\n    var signal = NSArray(array: \"A B C D\".componentsSeparatedByString(\" \")).rac_sequence.signal()\n    signal.subscribeNext { (a) -> Void in\n        println(a)\n    }\n```\n\n## Signals\n\n由于 Signal 在 OC 中一直返回的是 id 类型，如下\n\n```Objective-C\n[self.signal subscribeNext:^(id x) {\n  NSString *text = (NSString *)x;\n  NSLog(text);\n}];\n```\n\nid 类型在 OC 中可谓是万能类型，可以随意的转换和发消息。\n但是 Swift 号称类型安全，就不能这样了，要实现上面的代码，在 Swift 中可能是这样的\n\n```Swift\n\nself.signal.subscribeNext {\n  (next:AnyObject!) -> () in\n  if let text = next as? String {\n    println(countElements(text))\n  }\n}\n\n```\n\n但我们的武器箱里又多了一把武器，泛型。\n\n通过泛型，我们实现一个 RACSignal 的扩展，让其支持任意类型的转换。\n\n```Swift\nextension RACSignal {  \n  func subscribeNextAs<T>(nextClosure:(T) -> ()) -> () {\n    self.subscribeNext {\n      (next: AnyObject!) -> () in\n      let nextAsT = next as T\n      nextClosure(nextAsT)\n    }\n  }\n}\n```\n\n使用 subscribeNextAs 我们甚至可以写出比 OC 更好的代码\n\n```\nself.signal.subscribeNextAs {\n  (text:String) -> () in\n  println(countElements(text))\n}\n```\n\n今天到这里，未完待续...\n\n\n\n\n\n\n\n\n\n","slug":"swift-rac","updated":1411901725000,"excerpt":"","_id":"vu1tzjzy4kk5aus8","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"在 Swift 项目中集成 ReactiveCocoa (二)","date":1413117534000,"tags":[],"content":"<h2 id=\"Signals\">Signals</h2>\n<p>当然，类似于 subscribeNextAs，其它一些操作的 Swift 版本</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">RACSignal</span> </span>{</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> mapAs&lt;<span class=\"type\">T</span>: <span class=\"type\">AnyObject</span>, <span class=\"type\">U</span>: <span class=\"type\">AnyObject</span>&gt;(mapClosure:(<span class=\"type\">T</span>) -&gt; <span class=\"type\">U</span>) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.<span class=\"built_in\">map</span> {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; <span class=\"type\">AnyObject</span>! <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      <span class=\"keyword\">return</span> mapClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> filterAs&lt;<span class=\"type\">T</span>: <span class=\"type\">AnyObject</span>&gt;(filterClosure:(<span class=\"type\">T</span>) -&gt; <span class=\"type\">Bool</span>) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.<span class=\"built_in\">filter</span> {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      <span class=\"keyword\">return</span> filterClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> doNextAs&lt;<span class=\"type\">T</span>: <span class=\"type\">AnyObject</span>&gt;(nextClosure:(<span class=\"type\">T</span>) -&gt; ()) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.doNext {</div><div class=\"line\">      (next: <span class=\"type\">AnyObject</span>!) -&gt; () <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">let</span> nextAsT = next <span class=\"keyword\">as</span> <span class=\"type\">T</span></div><div class=\"line\">      nextClosure(nextAsT)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>Signal 之间可以联动，如下 </p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">RAC(<span class=\"keyword\">self</span><span class=\"variable\">.submitButton</span><span class=\"variable\">.enabled</span>) = [RACSignal combineLatest:@[<span class=\"keyword\">self</span><span class=\"variable\">.usernameField</span><span class=\"variable\">.rac_textSignal</span>, <span class=\"keyword\">self</span><span class=\"variable\">.passwordField</span><span class=\"variable\">.rac_textSignal</span>] reduce:^<span class=\"keyword\">id</span>(<span class=\"built_in\">NSString</span> *userName, <span class=\"built_in\">NSString</span> *password) {</div><div class=\"line\">    <span class=\"keyword\">return</span> @(userName<span class=\"variable\">.length</span> &gt;= <span class=\"number\">6</span> && password<span class=\"variable\">.length</span> &gt;= <span class=\"number\">6</span>);</div><div class=\"line\">}];</div></pre></td></tr></table></figure>\n\n<p>但是 Swift 中不能使用复杂的宏，所以需要把宏转换为一个结构体</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RAC</span>  </span>{</div><div class=\"line\">  <span class=\"keyword\">var</span> target : <span class=\"type\">NSObject</span>!</div><div class=\"line\">  <span class=\"keyword\">var</span> keyPath : <span class=\"type\">String</span>!</div><div class=\"line\">  <span class=\"keyword\">var</span> nilValue : <span class=\"type\">AnyObject</span>!</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"number\">_</span> target: <span class=\"type\">NSObject</span>!, <span class=\"number\">_</span> keyPath: <span class=\"type\">String</span>, nilValue: <span class=\"type\">AnyObject</span>? = <span class=\"built_in\">nil</span>) {</div><div class=\"line\">    <span class=\"keyword\">self</span>.target = target</div><div class=\"line\">    <span class=\"keyword\">self</span>.keyPath = keyPath</div><div class=\"line\">    <span class=\"keyword\">self</span>.nilValue = nilValue</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"func\"><span class=\"keyword\">func</span></span> assignSignal(signal : <span class=\"type\">RACSignal</span>) {</div><div class=\"line\">    signal.setKeyPath(<span class=\"keyword\">self</span>.keyPath, onObject: <span class=\"keyword\">self</span>.target, nilValue: <span class=\"keyword\">self</span>.nilValue)</div><div class=\"line\">  }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> ~&gt; {}</div><div class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span></span> ~&gt; (signal: <span class=\"type\">RACSignal</span>, rac: <span class=\"type\">RAC</span>) {</div><div class=\"line\">  rac.assignSignal(signal)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这样我们就可以很容易写出 Swift 的 RAC 版本</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">searchTextField.rac_textSignal() ~&gt; <span class=\"type\">RAC</span>(viewModel, <span class=\"string\">\"searchText\"</span>)</div></pre></td></tr></table></figure>\n\n<p>Combining latest values</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RACSignalEx</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">class</span> <span class=\"func\"><span class=\"keyword\">func</span></span> combineLatestAs&lt;<span class=\"type\">T</span>, <span class=\"type\">U</span>, <span class=\"type\">R</span>: <span class=\"type\">AnyObject</span>&gt;(signals:[<span class=\"type\">RACSignal</span>], <span class=\"built_in\">reduce</span>:(<span class=\"type\">T</span>,<span class=\"type\">U</span>) -&gt; <span class=\"type\">R</span>) -&gt; <span class=\"type\">RACSignal</span> {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">RACSignal</span>.combineLatest(signals).mapAs {</div><div class=\"line\">      (tuple: <span class=\"type\">RACTuple</span>) -&gt; <span class=\"type\">R</span> <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">reduce</span>(tuple.first <span class=\"keyword\">as</span> <span class=\"type\">T</span>, tuple.second <span class=\"keyword\">as</span> <span class=\"type\">U</span>)</div><div class=\"line\">    }</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">RACSignalEx</span>.combineLatestAs([favouritesSignal, commentsSignal]) {</div><div class=\"line\">      (favourites:<span class=\"type\">NSString</span>, comments:<span class=\"type\">NSString</span>) -&gt; <span class=\"type\">FlickrPhotoMetadata</span> <span class=\"keyword\">in</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"type\">FlickrPhotoMetadata</span>(favourites: favourites.integerValue, comments: comments.integerValue)</div><div class=\"line\">    }</div></pre></td></tr></table></figure>\n\n<p>RACObserve 监听属性的改变，使用block的KVO</p>\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"func\"><span class=\"keyword\">func</span></span> <span class=\"type\">RACObserve</span>(target: <span class=\"type\">NSObject</span>!, keyPath: <span class=\"type\">String</span>) -&gt; <span class=\"type\">RACSignal</span>  {</div><div class=\"line\">  <span class=\"keyword\">return</span> target.rac_valuesForKeyPath(keyPath, observer: target)</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> validSearchSignal = <span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>, <span class=\"string\">\"searchText\"</span>).mapAs {</div><div class=\"line\">    (text: <span class=\"type\">NSString</span>) -&gt; <span class=\"type\">NSNumber</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">return</span> text.length &gt; <span class=\"number\">3</span></div><div class=\"line\">  }.distinctUntilChanged();</div></pre></td></tr></table></figure>\n\n","source":"_posts/swift-rac2.md","raw":"title: 在 Swift 项目中集成 ReactiveCocoa (二)\ndate: 2014-10-12 20:38:54\ntags:\n---\n\n## Signals\n\n当然，类似于 subscribeNextAs，其它一些操作的 Swift 版本\n\n```Swift\nextension RACSignal {\n  \n  func mapAs<T: AnyObject, U: AnyObject>(mapClosure:(T) -> U) -> RACSignal {\n    return self.map {\n      (next: AnyObject!) -> AnyObject! in\n      let nextAsT = next as T\n      return mapClosure(nextAsT)\n    }\n  }\n  \n  func filterAs<T: AnyObject>(filterClosure:(T) -> Bool) -> RACSignal {\n    return self.filter {\n      (next: AnyObject!) -> Bool in\n      let nextAsT = next as T\n      return filterClosure(nextAsT)\n    }\n  }\n  \n  func doNextAs<T: AnyObject>(nextClosure:(T) -> ()) -> RACSignal {\n    return self.doNext {\n      (next: AnyObject!) -> () in\n      let nextAsT = next as T\n      nextClosure(nextAsT)\n    }\n  }\n}\n```\n\nSignal 之间可以联动，如下 \n\n```Objective-C\nRAC(self.submitButton.enabled) = [RACSignal combineLatest:@[self.usernameField.rac_textSignal, self.passwordField.rac_textSignal] reduce:^id(NSString *userName, NSString *password) {\n    return @(userName.length >= 6 && password.length >= 6);\n}];\n```\n\n但是 Swift 中不能使用复杂的宏，所以需要把宏转换为一个结构体\n\n```Swift\nstruct RAC  {\n  var target : NSObject!\n  var keyPath : String!\n  var nilValue : AnyObject!\n  \n  init(_ target: NSObject!, _ keyPath: String, nilValue: AnyObject? = nil) {\n    self.target = target\n    self.keyPath = keyPath\n    self.nilValue = nilValue\n  }\n  \n  \n  func assignSignal(signal : RACSignal) {\n    signal.setKeyPath(self.keyPath, onObject: self.target, nilValue: self.nilValue)\n  }\n}\n\ninfix operator ~> {}\nfunc ~> (signal: RACSignal, rac: RAC) {\n  rac.assignSignal(signal)\n}\n```\n\n这样我们就可以很容易写出 Swift 的 RAC 版本\n\n```Swift\nsearchTextField.rac_textSignal() ~> RAC(viewModel, \"searchText\")\n```\n\nCombining latest values\n\n```Swift\nclass RACSignalEx {\n  class func combineLatestAs<T, U, R: AnyObject>(signals:[RACSignal], reduce:(T,U) -> R) -> RACSignal {\n    return RACSignal.combineLatest(signals).mapAs {\n      (tuple: RACTuple) -> R in\n      return reduce(tuple.first as T, tuple.second as U)\n    }\n  }\n}\n```\n\n```Swift\nRACSignalEx.combineLatestAs([favouritesSignal, commentsSignal]) {\n      (favourites:NSString, comments:NSString) -> FlickrPhotoMetadata in\n      return FlickrPhotoMetadata(favourites: favourites.integerValue, comments: comments.integerValue)\n    }\n```\n\nRACObserve 监听属性的改变，使用block的KVO\n\n```Swift\nfunc RACObserve(target: NSObject!, keyPath: String) -> RACSignal  {\n  return target.rac_valuesForKeyPath(keyPath, observer: target)\n}\n```\n\n```Swift\nlet validSearchSignal = RACObserve(self, \"searchText\").mapAs {\n    (text: NSString) -> NSNumber in\n    return text.length > 3\n  }.distinctUntilChanged();\n```","slug":"swift-rac2","updated":1413119353000,"excerpt":"","_id":"s5abjojbaxy2t4ju","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"AsyncDisplayKit：Paper的异步UI技术(一)","date":1413739524000,"tags":[],"content":"<p>自从上次听了 Facebook 的技术分享之后，对它的异步 UI 技术非常的神往。<br>终于，在几个月后，看到 GitHub - ObjC 排行榜第一名的 AsyncDisplayKit ！</p>\n<p><img src=\"/img/asyncdisplaykit-logo.png\" alt=\"logo\"></p>\n<p>AsyncDisplayKit 是 Facebook 的 Paper 团队在项目研发时的副产品<br>基于以下一些理由</p>\n<ol>\n<li>手势和物理动画相结合 (POP引擎) ，还要有非常流畅的效果。</li>\n<li>丢帧的效果令人沮丧，失败的预期会导致人焦虑。</li>\n<li>触控和动画都是至关重要的，需要60FPS的水准。</li>\n<li>CA 引擎只作用于静态动画，无法处理手势和物理效果动画。</li>\n<li>用户可以在任意状态下操作界面，而静态动画往往是 fire-and-forget.</li>\n<li>当你决定不再需要渲染时Block主线程时，自然而然会想到在设计初始就用一个特殊的架构去实现。</li>\n</ol>\n<p>导致丢帧的因素可能有哪些呢？</p>\n<ol>\n<li>拖延主线程超过5毫秒，将导致丢帧。</li>\n<li><ul>\n<li>layoutSubViews / - layoutSublayers</li>\n</ul>\n</li>\n<li><ul>\n<li>drawRect:</li>\n</ul>\n</li>\n<li>UIView: init / addSubview: / removeFromSuperview / dealloc</li>\n</ol>\n<p>异步UI设计了 Node 这样一个新的数据结构</p>\n<p>Node 是类似于 View 的一种视图对象，但是它的渲染都不在主线程完成，所以一定不会卡住主线程，同时可以转换为 View, 借用官方的一个图来说：</p>\n<p><img src=\"/img/asyncdisplaykit-node.png\" alt=\"node\"></p>\n<p> 今天就到这里，未完待续！</p>\n","source":"_posts/asyncdisplaykit.md","raw":"title: AsyncDisplayKit：Paper的异步UI技术(一)\ndate: 2014-10-20 01:25:24\ntags:\n---\n\n自从上次听了 Facebook 的技术分享之后，对它的异步 UI 技术非常的神往。\n终于，在几个月后，看到 GitHub - ObjC 排行榜第一名的 AsyncDisplayKit ！\n\n![logo](/img/asyncdisplaykit-logo.png)\n\nAsyncDisplayKit 是 Facebook 的 Paper 团队在项目研发时的副产品\n基于以下一些理由\n\n1. 手势和物理动画相结合 (POP引擎) ，还要有非常流畅的效果。\n2. 丢帧的效果令人沮丧，失败的预期会导致人焦虑。\n3. 触控和动画都是至关重要的，需要60FPS的水准。\n4. CA 引擎只作用于静态动画，无法处理手势和物理效果动画。\n5. 用户可以在任意状态下操作界面，而静态动画往往是 fire-and-forget.\n6. 当你决定不再需要渲染时Block主线程时，自然而然会想到在设计初始就用一个特殊的架构去实现。\n\n\n导致丢帧的因素可能有哪些呢？\n\n1. 拖延主线程超过5毫秒，将导致丢帧。\n2. - layoutSubViews / - layoutSublayers\n3. - drawRect:\n4. UIView: init / addSubview: / removeFromSuperview / dealloc\n\n\n异步UI设计了 Node 这样一个新的数据结构\n\nNode 是类似于 View 的一种视图对象，但是它的渲染都不在主线程完成，所以一定不会卡住主线程，同时可以转换为 View, 借用官方的一个图来说：\n\n![node](/img/asyncdisplaykit-node.png)\n\n 今天就到这里，未完待续！\n\n\n\n\n\n\n","slug":"asyncdisplaykit","updated":1413741225000,"excerpt":"","_id":"kdqf8nf22t0dv538","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"AsyncDisplayKit：Paper的异步UI技术(二)","date":1413870112000,"tags":[],"content":"<p>使用 Node 这一重新设计的类型，我们可以很方便的在后台进行界面渲染</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">dispatch_async</span>(_backgroundQueue, ^{</div><div class=\"line\">  ASTextNode *node = [[ASTextNode alloc] init];</div><div class=\"line\">  node<span class=\"variable\">.attributedString</span> = [[NSAttributedString alloc] initWithString:<span class=\"string\">@\"hello!\"</span></div><div class=\"line\">                                                          attributes:<span class=\"literal\">nil</span>];</div><div class=\"line\">  [node measure:CGSizeMake(screenWidth, FLT_MAX)];</div><div class=\"line\">  node<span class=\"variable\">.frame</span> = (<span class=\"built_in\">CGRect</span>){ CGPointZero, node<span class=\"variable\">.calculatedSize</span> };</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// self.view isn't a node, so we can only use it on the main thread</span></div><div class=\"line\">  <span class=\"built_in\">dispatch_sync</span>(dispatch_get_main_queue(), ^{</div><div class=\"line\">    [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:node<span class=\"variable\">.view</span>];</div><div class=\"line\">  });</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>目前可以使用的 Node 有以下几种</p>\n<ul>\n<li>ASDisplayNode. Counterpart to UIView — subclass to make custom nodes.</li>\n<li>ASControlNode. Analogous to UIControl — subclass to make buttons.</li>\n<li>ASImageNode. Like UIImageView — decodes images asynchronously.</li>\n<li>ASTextNode. Like UITextView — built on TextKit with full-featured rich text support.</li>\n<li>ASTableView. UITableView subclass that supports nodes.</li>\n</ul>\n<p>我们可以在 - loadView 实现里这么写</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">_imageView = [[UIImageView alloc] init];</div><div class=\"line\">_imageView.image = [UIImage imageNamed:@<span class=\"string\">\"hello\"</span>];</div><div class=\"line\">_imageView.frame = CGRectMake(<span class=\"number\">10.0f</span>, <span class=\"number\">10.0f</span>, <span class=\"number\">40.0f</span>, <span class=\"number\">40.0f</span>);</div><div class=\"line\">[self.view addSubview:_imageView];</div></pre></td></tr></table></figure>\n\n<p>Node 版本</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"constant\">_imageNode</span> = [[ASImageNode alloc] init];</div><div class=\"line\"><span class=\"constant\">_imageNode.backgroundColor</span> = [UIColor lightGrayColor];</div><div class=\"line\"><span class=\"constant\">_imageNode.image</span> = [UIImage imageNamed:@<span class=\"string\">\"hello\"</span>];</div><div class=\"line\"><span class=\"constant\">_imageNode.frame</span> = CGRectMake(<span class=\"number\">10.0</span>f, <span class=\"number\">10.0</span>f, <span class=\"number\">40.0</span>f, <span class=\"number\">40.0</span>f);</div><div class=\"line\">[self.view addSubview:_imageNode.view];</div></pre></td></tr></table></figure>\n\n<p>表面看，上面的代码并没有用到异步 UI 渲染，但实际上速度仍然要快一点，因为 _imageNode.image = xxx 会在后台执行，所以能充分利用多核的计算能力。</p>\n<p>此外，我们也能够使用 Node 来响应交互事件</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</div><div class=\"line\">{</div><div class=\"line\">  [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// attribute a string</span></div><div class=\"line\">  <span class=\"built_in\">NSDictionary</span> *attrs = @{</div><div class=\"line\">                          NSFontAttributeName: [<span class=\"built_in\">UIFont</span> systemFontOfSize:<span class=\"number\">12.0</span>f],</div><div class=\"line\">                          NSForegroundColorAttributeName: [<span class=\"built_in\">UIColor</span> redColor],</div><div class=\"line\">                          };</div><div class=\"line\">  NSAttributedString *string = [[NSAttributedString alloc] initWithString:<span class=\"string\">@\"shuffle\"</span></div><div class=\"line\">                                                               attributes:attrs];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// create the node</span></div><div class=\"line\">  _shuffleNode = [[ASTextNode alloc] init];</div><div class=\"line\">  _shuffleNode<span class=\"variable\">.attributedString</span> = string;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// configure the button</span></div><div class=\"line\">  _shuffleNode<span class=\"variable\">.userInteractionEnabled</span> = <span class=\"literal\">YES</span>; <span class=\"comment\">// opt into touch handling</span></div><div class=\"line\">  [_shuffleNode addTarget:<span class=\"keyword\">self</span></div><div class=\"line\">                   action:<span class=\"keyword\">@selector</span>(buttonTapped:)</div><div class=\"line\">         forControlEvents:ASControlNodeEventTouchUpInside];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// size all the things</span></div><div class=\"line\">  <span class=\"built_in\">CGRect</span> b = <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.bounds</span>; <span class=\"comment\">// convenience</span></div><div class=\"line\">  <span class=\"built_in\">CGSize</span> size = [_shuffleNode measure:CGSizeMake(b<span class=\"variable\">.size</span><span class=\"variable\">.width</span>, FLT_MAX)];</div><div class=\"line\">  <span class=\"built_in\">CGPoint</span> origin = CGPointMake(roundf( (b<span class=\"variable\">.size</span><span class=\"variable\">.width</span> - size<span class=\"variable\">.width</span>) / <span class=\"number\">2.0</span>f ),</div><div class=\"line\">                               roundf( (b<span class=\"variable\">.size</span><span class=\"variable\">.height</span> - size<span class=\"variable\">.height</span>) / <span class=\"number\">2.0</span>f ));</div><div class=\"line\">  _shuffleNode<span class=\"variable\">.frame</span> = (<span class=\"built_in\">CGRect</span>){ origin, size };</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// add to our view</span></div><div class=\"line\">  [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:_shuffleNode<span class=\"variable\">.view</span>];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)buttonTapped:(<span class=\"keyword\">id</span>)sender</div><div class=\"line\">{</div><div class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"tapped!\"</span>);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>有一个问题是，按钮的大小并非有 44 那么高。所以我们这里还需要提供一个方法，让触摸的热点变的更大。</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// size all the things</div><div class=\"line\"> /* <span class=\"keyword\">...</span> */</div><div class=\"line\"></div><div class=\"line\"> // make the tap target taller</div><div class=\"line\"> CGFloat extendY = roundf( (<span class=\"number\">44.</span>0f - size.height) / <span class=\"number\">2.</span>0f );</div><div class=\"line\"> _shuffleNode.hitTestSlop = UIEdgeInsetsMake(-extendY, <span class=\"number\">0.</span>0f, -extendY, <span class=\"number\">0.</span>0f);</div></pre></td></tr></table></figure>\n\n","source":"_posts/asyncdisplaykit2.md","raw":"title: AsyncDisplayKit：Paper的异步UI技术(二)\ndate: 2014-10-21 13:41:52\ntags:\n---\n\n使用 Node 这一重新设计的类型，我们可以很方便的在后台进行界面渲染\n\n```Objective-C\n\ndispatch_async(_backgroundQueue, ^{\n  ASTextNode *node = [[ASTextNode alloc] init];\n  node.attributedString = [[NSAttributedString alloc] initWithString:@\"hello!\"\n                                                          attributes:nil];\n  [node measure:CGSizeMake(screenWidth, FLT_MAX)];\n  node.frame = (CGRect){ CGPointZero, node.calculatedSize };\n\n  // self.view isn't a node, so we can only use it on the main thread\n  dispatch_sync(dispatch_get_main_queue(), ^{\n    [self.view addSubview:node.view];\n  });\n});\n\n```\n\n目前可以使用的 Node 有以下几种\n\n* ASDisplayNode. Counterpart to UIView — subclass to make custom nodes.\n* ASControlNode. Analogous to UIControl — subclass to make buttons.\n* ASImageNode. Like UIImageView — decodes images asynchronously.\n* ASTextNode. Like UITextView — built on TextKit with full-featured rich text support.\n* ASTableView. UITableView subclass that supports nodes.\n\n我们可以在 - loadView 实现里这么写\n\n```Objective-C\n_imageView = [[UIImageView alloc] init];\n_imageView.image = [UIImage imageNamed:@\"hello\"];\n_imageView.frame = CGRectMake(10.0f, 10.0f, 40.0f, 40.0f);\n[self.view addSubview:_imageView];\n```\n\nNode 版本\n\n```Objective-C\n_imageNode = [[ASImageNode alloc] init];\n_imageNode.backgroundColor = [UIColor lightGrayColor];\n_imageNode.image = [UIImage imageNamed:@\"hello\"];\n_imageNode.frame = CGRectMake(10.0f, 10.0f, 40.0f, 40.0f);\n[self.view addSubview:_imageNode.view];\n```\n\n表面看，上面的代码并没有用到异步 UI 渲染，但实际上速度仍然要快一点，因为 _imageNode.image = xxx 会在后台执行，所以能充分利用多核的计算能力。\n\n\n此外，我们也能够使用 Node 来响应交互事件\n\n```Objective-C\n- (void)viewDidLoad\n{\n  [super viewDidLoad];\n\n  // attribute a string\n  NSDictionary *attrs = @{\n                          NSFontAttributeName: [UIFont systemFontOfSize:12.0f],\n                          NSForegroundColorAttributeName: [UIColor redColor],\n                          };\n  NSAttributedString *string = [[NSAttributedString alloc] initWithString:@\"shuffle\"\n                                                               attributes:attrs];\n\n  // create the node\n  _shuffleNode = [[ASTextNode alloc] init];\n  _shuffleNode.attributedString = string;\n\n  // configure the button\n  _shuffleNode.userInteractionEnabled = YES; // opt into touch handling\n  [_shuffleNode addTarget:self\n                   action:@selector(buttonTapped:)\n         forControlEvents:ASControlNodeEventTouchUpInside];\n\n  // size all the things\n  CGRect b = self.view.bounds; // convenience\n  CGSize size = [_shuffleNode measure:CGSizeMake(b.size.width, FLT_MAX)];\n  CGPoint origin = CGPointMake(roundf( (b.size.width - size.width) / 2.0f ),\n                               roundf( (b.size.height - size.height) / 2.0f ));\n  _shuffleNode.frame = (CGRect){ origin, size };\n\n  // add to our view\n  [self.view addSubview:_shuffleNode.view];\n}\n\n- (void)buttonTapped:(id)sender\n{\n  NSLog(@\"tapped!\");\n}\n\n```\n\n有一个问题是，按钮的大小并非有 44 那么高。所以我们这里还需要提供一个方法，让触摸的热点变的更大。\n\n```Objective-C\n // size all the things\n  /* ... */\n\n  // make the tap target taller\n  CGFloat extendY = roundf( (44.0f - size.height) / 2.0f );\n  _shuffleNode.hitTestSlop = UIEdgeInsetsMake(-extendY, 0.0f, -extendY, 0.0f);\n```\n\n","slug":"asyncdisplaykit2","updated":1414341603000,"excerpt":"","_id":"nu15cf4c0pg6e4aw","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"使用 Mantle 来序列化对象","date":1414968671000,"tags":[],"content":"<p>Mantle 是一个 Cocoa 的 Model 工具，非常的强大。</p>\n<p>在很早的时候 Cocoa Love 上就发布了一篇文章，JSON -&gt; Model 这个过程其实可以通过 OC 强大的动态特性来自动完成，自此之后，许多自动序列化工具如雨后春笋搬的在 Github 上出现了，这里面的佼佼者就是 Mantle，Github 团队出品。</p>\n<p>当我们不用任何自动序列化工具时，是如何完成一个 JSON -&gt; Model 的过程呢？</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> : NSUInteger {</div><div class=\"line\">    GHIssueStateOpen,</div><div class=\"line\">    GHIssueStateClosed</div><div class=\"line\">} GHIssueState;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GHIssue</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">NSCoding</span>, <span class=\"title\">NSCopying</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *URL;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *HTMLURL;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSNumber</span> *number;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>, <span class=\"keyword\">readonly</span>) GHIssueState state;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *reporterLogin;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *updatedAt;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) GHUser *assignee;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *retrievedAt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *title;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *body;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithDictionary:(<span class=\"built_in\">NSDictionary</span> *)dictionary;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GHIssue</span></span></div><div class=\"line\"></div><div class=\"line\">+ (NSDateFormatter *)dateFormatter {</div><div class=\"line\">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];</div><div class=\"line\">    dateFormatter<span class=\"variable\">.locale</span> = [[NSLocale alloc] initWithLocaleIdentifier:<span class=\"string\">@\"en_US_POSIX\"</span>];</div><div class=\"line\">    dateFormatter<span class=\"variable\">.dateFormat</span> = <span class=\"string\">@\"yyyy-MM-dd'T'HH:mm:ss'Z'\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateFormatter;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithDictionary:(<span class=\"built_in\">NSDictionary</span> *)dictionary {</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == <span class=\"literal\">nil</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    _URL = [<span class=\"built_in\">NSURL</span> URLWithString:dictionary[<span class=\"string\">@\"url\"</span>]];</div><div class=\"line\">    _HTMLURL = [<span class=\"built_in\">NSURL</span> URLWithString:dictionary[<span class=\"string\">@\"html_url\"</span>]];</div><div class=\"line\">    _number = dictionary[<span class=\"string\">@\"number\"</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ([dictionary[<span class=\"string\">@\"state\"</span>] isEqualToString:<span class=\"string\">@\"open\"</span>]) {</div><div class=\"line\">        _state = GHIssueStateOpen;</div><div class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([dictionary[<span class=\"string\">@\"state\"</span>] isEqualToString:<span class=\"string\">@\"closed\"</span>]) {</div><div class=\"line\">        _state = GHIssueStateClosed;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    _title = [dictionary[<span class=\"string\">@\"title\"</span>] <span class=\"keyword\">copy</span>];</div><div class=\"line\">    _retrievedAt = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\">    _body = [dictionary[<span class=\"string\">@\"body\"</span>] <span class=\"keyword\">copy</span>];</div><div class=\"line\">    _reporterLogin = [dictionary[<span class=\"string\">@\"user\"</span>][<span class=\"string\">@\"login\"</span>] <span class=\"keyword\">copy</span>];</div><div class=\"line\">    _assignee = [[GHUser alloc] initWithDictionary:dictionary[<span class=\"string\">@\"assignee\"</span>]];</div><div class=\"line\"></div><div class=\"line\">    _updatedAt = [<span class=\"keyword\">self</span><span class=\"variable\">.class</span><span class=\"variable\">.dateFormatter</span> dateFromString:dictionary[<span class=\"string\">@\"updated_at\"</span>]];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(NSCoder *)coder {</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">self</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == <span class=\"literal\">nil</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    _URL = [coder decodeObjectForKey:<span class=\"string\">@\"URL\"</span>];</div><div class=\"line\">    _HTMLURL = [coder decodeObjectForKey:<span class=\"string\">@\"HTMLURL\"</span>];</div><div class=\"line\">    _number = [coder decodeObjectForKey:<span class=\"string\">@\"number\"</span>];</div><div class=\"line\">    _state = [coder decodeUnsignedIntegerForKey:<span class=\"string\">@\"state\"</span>];</div><div class=\"line\">    _title = [coder decodeObjectForKey:<span class=\"string\">@\"title\"</span>];</div><div class=\"line\">    _retrievedAt = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\">    _body = [coder decodeObjectForKey:<span class=\"string\">@\"body\"</span>];</div><div class=\"line\">    _reporterLogin = [coder decodeObjectForKey:<span class=\"string\">@\"reporterLogin\"</span>];</div><div class=\"line\">    _assignee = [coder decodeObjectForKey:<span class=\"string\">@\"assignee\"</span>];</div><div class=\"line\">    _updatedAt = [coder decodeObjectForKey:<span class=\"string\">@\"updatedAt\"</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(NSCoder *)coder {</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.URL</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.URL</span> forKey:<span class=\"string\">@\"URL\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.HTMLURL</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.HTMLURL</span> forKey:<span class=\"string\">@\"HTMLURL\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.number</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.number</span> forKey:<span class=\"string\">@\"number\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.title</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.title</span> forKey:<span class=\"string\">@\"title\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.body</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.body</span> forKey:<span class=\"string\">@\"body\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.reporterLogin</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.reporterLogin</span> forKey:<span class=\"string\">@\"reporterLogin\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.assignee</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.assignee</span> forKey:<span class=\"string\">@\"assignee\"</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.updatedAt</span> != <span class=\"literal\">nil</span>) [coder encodeObject:<span class=\"keyword\">self</span><span class=\"variable\">.updatedAt</span> forKey:<span class=\"string\">@\"updatedAt\"</span>];</div><div class=\"line\"></div><div class=\"line\">    [coder encodeUnsignedInteger:<span class=\"keyword\">self</span><span class=\"variable\">.state</span> forKey:<span class=\"string\">@\"state\"</span>];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(NSZone *)zone {</div><div class=\"line\">    GHIssue *issue = [[<span class=\"keyword\">self</span><span class=\"variable\">.class</span> allocWithZone:zone] init];</div><div class=\"line\">    issue-&gt;_URL = <span class=\"keyword\">self</span><span class=\"variable\">.URL</span>;</div><div class=\"line\">    issue-&gt;_HTMLURL = <span class=\"keyword\">self</span><span class=\"variable\">.HTMLURL</span>;</div><div class=\"line\">    issue-&gt;_number = <span class=\"keyword\">self</span><span class=\"variable\">.number</span>;</div><div class=\"line\">    issue-&gt;_state = <span class=\"keyword\">self</span><span class=\"variable\">.state</span>;</div><div class=\"line\">    issue-&gt;_reporterLogin = <span class=\"keyword\">self</span><span class=\"variable\">.reporterLogin</span>;</div><div class=\"line\">    issue-&gt;_assignee = <span class=\"keyword\">self</span><span class=\"variable\">.assignee</span>;</div><div class=\"line\">    issue-&gt;_updatedAt = <span class=\"keyword\">self</span><span class=\"variable\">.updatedAt</span>;</div><div class=\"line\"></div><div class=\"line\">    issue<span class=\"variable\">.title</span> = <span class=\"keyword\">self</span><span class=\"variable\">.title</span>;</div><div class=\"line\">    issue-&gt;_retrievedAt = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\">    issue<span class=\"variable\">.body</span> = <span class=\"keyword\">self</span><span class=\"variable\">.body</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> issue;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (NSUInteger)hash {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span><span class=\"variable\">.number</span><span class=\"variable\">.hash</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)isEqual:(GHIssue *)issue {</div><div class=\"line\">    <span class=\"keyword\">if</span> (![issue isKindOfClass:GHIssue<span class=\"variable\">.class</span>]) <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span><span class=\"variable\">.number</span> isEqual:issue<span class=\"variable\">.number</span>] && [<span class=\"keyword\">self</span><span class=\"variable\">.title</span> isEqual:issue<span class=\"variable\">.title</span>] && [<span class=\"keyword\">self</span><span class=\"variable\">.body</span> isEqual:issue<span class=\"variable\">.body</span>];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p>尽管我们写了这么多代码，但是仍然存在很多问题</p>\n<ul>\n<li>没有途径去方便的更新 GHIssue 类型</li>\n<li>如果要从对象的 GHIssue 类型逆推出 JSON 也是件困难的事情</li>\n<li>archives 很容易因为类型升级而损坏</li>\n</ul>\n<p>假如用了 MTLModel 一切就变的很自然了</p>\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> : NSUInteger {</div><div class=\"line\">    GHIssueStateOpen,</div><div class=\"line\">    GHIssueStateClosed</div><div class=\"line\">} GHIssueState;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GHIssue</span> : <span class=\"title\">MTLModel</span> &lt;<span class=\"title\">MTLJSONSerializing</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *URL;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSURL</span> *HTMLURL;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSNumber</span> *number;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>, <span class=\"keyword\">readonly</span>) GHIssueState state;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSString</span> *reporterLogin;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) GHUser *assignee;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *updatedAt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *title;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *body;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">NSDate</span> *retrievedAt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight Objective-C\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GHIssue</span></span></div><div class=\"line\"></div><div class=\"line\">+ (NSDateFormatter *)dateFormatter {</div><div class=\"line\">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];</div><div class=\"line\">    dateFormatter<span class=\"variable\">.locale</span> = [[NSLocale alloc] initWithLocaleIdentifier:<span class=\"string\">@\"en_US_POSIX\"</span>];</div><div class=\"line\">    dateFormatter<span class=\"variable\">.dateFormat</span> = <span class=\"string\">@\"yyyy-MM-dd'T'HH:mm:ss'Z'\"</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateFormatter;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">NSDictionary</span> *)JSONKeyPathsByPropertyKey {</div><div class=\"line\">    <span class=\"keyword\">return</span> @{</div><div class=\"line\">        <span class=\"string\">@\"URL\"</span>: <span class=\"string\">@\"url\"</span>,</div><div class=\"line\">        <span class=\"string\">@\"HTMLURL\"</span>: <span class=\"string\">@\"html_url\"</span>,</div><div class=\"line\">        <span class=\"string\">@\"reporterLogin\"</span>: <span class=\"string\">@\"user.login\"</span>,</div><div class=\"line\">        <span class=\"string\">@\"assignee\"</span>: <span class=\"string\">@\"assignee\"</span>,</div><div class=\"line\">        <span class=\"string\">@\"updatedAt\"</span>: <span class=\"string\">@\"updated_at\"</span></div><div class=\"line\">    };</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)URLJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)HTMLURLJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)stateJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [NSValueTransformer mtl_valueMappingTransformerWithDictionary:@{</div><div class=\"line\">        <span class=\"string\">@\"open\"</span>: @(GHIssueStateOpen),</div><div class=\"line\">        <span class=\"string\">@\"closed\"</span>: @(GHIssueStateClosed)</div><div class=\"line\">    }];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)assigneeJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [NSValueTransformer mtl_JSONDictionaryTransformerWithModelClass:GHUser<span class=\"variable\">.class</span>];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">+ (NSValueTransformer *)updatedAtJSONTransformer {</div><div class=\"line\">    <span class=\"keyword\">return</span> [MTLValueTransformer reversibleTransformerWithForwardBlock:^(<span class=\"built_in\">NSString</span> *str) {</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span><span class=\"variable\">.dateFormatter</span> dateFromString:str];</div><div class=\"line\">    } reverseBlock:^(<span class=\"built_in\">NSDate</span> *date) {</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span><span class=\"variable\">.dateFormatter</span> stringFromDate:date];</div><div class=\"line\">    }];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (instancetype)initWithDictionary:(<span class=\"built_in\">NSDictionary</span> *)dictionaryValue error:(<span class=\"built_in\">NSError</span> **)error {</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> initWithDictionary:dictionaryValue error:error];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == <span class=\"literal\">nil</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Store a value that needs to be determined locally upon initialization.</span></div><div class=\"line\">    _retrievedAt = [<span class=\"built_in\">NSDate</span> date];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p>除了 序列化 MTLModel 还免费提供了以下特性</p>\n<ul>\n<li>hash </li>\n<li>NSCoding</li>\n<li>-isEqual:</li>\n</ul>\n<p>真的是非常贴心的工具。</p>\n","source":"_posts/use-mantle.md","raw":"title: 使用 Mantle 来序列化对象\ndate: 2014-11-03 06:51:11\ntags:\n---\n\nMantle 是一个 Cocoa 的 Model 工具，非常的强大。\n\n在很早的时候 Cocoa Love 上就发布了一篇文章，JSON -> Model 这个过程其实可以通过 OC 强大的动态特性来自动完成，自此之后，许多自动序列化工具如雨后春笋搬的在 Github 上出现了，这里面的佼佼者就是 Mantle，Github 团队出品。\n\n当我们不用任何自动序列化工具时，是如何完成一个 JSON -> Model 的过程呢？\n\n```Objective-C\ntypedef enum : NSUInteger {\n    GHIssueStateOpen,\n    GHIssueStateClosed\n} GHIssueState;\n\n@interface GHIssue : NSObject <NSCoding, NSCopying>\n\n@property (nonatomic, copy, readonly) NSURL *URL;\n@property (nonatomic, copy, readonly) NSURL *HTMLURL;\n@property (nonatomic, copy, readonly) NSNumber *number;\n@property (nonatomic, assign, readonly) GHIssueState state;\n@property (nonatomic, copy, readonly) NSString *reporterLogin;\n@property (nonatomic, copy, readonly) NSDate *updatedAt;\n@property (nonatomic, strong, readonly) GHUser *assignee;\n@property (nonatomic, copy, readonly) NSDate *retrievedAt;\n\n@property (nonatomic, copy) NSString *title;\n@property (nonatomic, copy) NSString *body;\n\n- (id)initWithDictionary:(NSDictionary *)dictionary;\n\n@end\n```\n\n```Objective-C\n@implementation GHIssue\n\n+ (NSDateFormatter *)dateFormatter {\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    dateFormatter.locale = [[NSLocale alloc] initWithLocaleIdentifier:@\"en_US_POSIX\"];\n    dateFormatter.dateFormat = @\"yyyy-MM-dd'T'HH:mm:ss'Z'\";\n    return dateFormatter;\n}\n\n- (id)initWithDictionary:(NSDictionary *)dictionary {\n    self = [self init];\n    if (self == nil) return nil;\n\n    _URL = [NSURL URLWithString:dictionary[@\"url\"]];\n    _HTMLURL = [NSURL URLWithString:dictionary[@\"html_url\"]];\n    _number = dictionary[@\"number\"];\n\n    if ([dictionary[@\"state\"] isEqualToString:@\"open\"]) {\n        _state = GHIssueStateOpen;\n    } else if ([dictionary[@\"state\"] isEqualToString:@\"closed\"]) {\n        _state = GHIssueStateClosed;\n    }\n\n    _title = [dictionary[@\"title\"] copy];\n    _retrievedAt = [NSDate date];\n    _body = [dictionary[@\"body\"] copy];\n    _reporterLogin = [dictionary[@\"user\"][@\"login\"] copy];\n    _assignee = [[GHUser alloc] initWithDictionary:dictionary[@\"assignee\"]];\n\n    _updatedAt = [self.class.dateFormatter dateFromString:dictionary[@\"updated_at\"]];\n\n    return self;\n}\n\n- (id)initWithCoder:(NSCoder *)coder {\n    self = [self init];\n    if (self == nil) return nil;\n\n    _URL = [coder decodeObjectForKey:@\"URL\"];\n    _HTMLURL = [coder decodeObjectForKey:@\"HTMLURL\"];\n    _number = [coder decodeObjectForKey:@\"number\"];\n    _state = [coder decodeUnsignedIntegerForKey:@\"state\"];\n    _title = [coder decodeObjectForKey:@\"title\"];\n    _retrievedAt = [NSDate date];\n    _body = [coder decodeObjectForKey:@\"body\"];\n    _reporterLogin = [coder decodeObjectForKey:@\"reporterLogin\"];\n    _assignee = [coder decodeObjectForKey:@\"assignee\"];\n    _updatedAt = [coder decodeObjectForKey:@\"updatedAt\"];\n\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)coder {\n    if (self.URL != nil) [coder encodeObject:self.URL forKey:@\"URL\"];\n    if (self.HTMLURL != nil) [coder encodeObject:self.HTMLURL forKey:@\"HTMLURL\"];\n    if (self.number != nil) [coder encodeObject:self.number forKey:@\"number\"];\n    if (self.title != nil) [coder encodeObject:self.title forKey:@\"title\"];\n    if (self.body != nil) [coder encodeObject:self.body forKey:@\"body\"];\n    if (self.reporterLogin != nil) [coder encodeObject:self.reporterLogin forKey:@\"reporterLogin\"];\n    if (self.assignee != nil) [coder encodeObject:self.assignee forKey:@\"assignee\"];\n    if (self.updatedAt != nil) [coder encodeObject:self.updatedAt forKey:@\"updatedAt\"];\n\n    [coder encodeUnsignedInteger:self.state forKey:@\"state\"];\n}\n\n- (id)copyWithZone:(NSZone *)zone {\n    GHIssue *issue = [[self.class allocWithZone:zone] init];\n    issue->_URL = self.URL;\n    issue->_HTMLURL = self.HTMLURL;\n    issue->_number = self.number;\n    issue->_state = self.state;\n    issue->_reporterLogin = self.reporterLogin;\n    issue->_assignee = self.assignee;\n    issue->_updatedAt = self.updatedAt;\n\n    issue.title = self.title;\n    issue->_retrievedAt = [NSDate date];\n    issue.body = self.body;\n\n    return issue;\n}\n\n- (NSUInteger)hash {\n    return self.number.hash;\n}\n\n- (BOOL)isEqual:(GHIssue *)issue {\n    if (![issue isKindOfClass:GHIssue.class]) return NO;\n\n    return [self.number isEqual:issue.number] && [self.title isEqual:issue.title] && [self.body isEqual:issue.body];\n}\n\n@end\n```\n\n尽管我们写了这么多代码，但是仍然存在很多问题\n\n* 没有途径去方便的更新 GHIssue 类型\n* 如果要从对象的 GHIssue 类型逆推出 JSON 也是件困难的事情\n* archives 很容易因为类型升级而损坏\n\n假如用了 MTLModel 一切就变的很自然了\n\n```Objective-C\ntypedef enum : NSUInteger {\n    GHIssueStateOpen,\n    GHIssueStateClosed\n} GHIssueState;\n\n@interface GHIssue : MTLModel <MTLJSONSerializing>\n\n@property (nonatomic, copy, readonly) NSURL *URL;\n@property (nonatomic, copy, readonly) NSURL *HTMLURL;\n@property (nonatomic, copy, readonly) NSNumber *number;\n@property (nonatomic, assign, readonly) GHIssueState state;\n@property (nonatomic, copy, readonly) NSString *reporterLogin;\n@property (nonatomic, strong, readonly) GHUser *assignee;\n@property (nonatomic, copy, readonly) NSDate *updatedAt;\n\n@property (nonatomic, copy) NSString *title;\n@property (nonatomic, copy) NSString *body;\n\n@property (nonatomic, copy, readonly) NSDate *retrievedAt;\n\n@end\n```\n\n```Objective-C\n@implementation GHIssue\n\n+ (NSDateFormatter *)dateFormatter {\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    dateFormatter.locale = [[NSLocale alloc] initWithLocaleIdentifier:@\"en_US_POSIX\"];\n    dateFormatter.dateFormat = @\"yyyy-MM-dd'T'HH:mm:ss'Z'\";\n    return dateFormatter;\n}\n\n+ (NSDictionary *)JSONKeyPathsByPropertyKey {\n    return @{\n        @\"URL\": @\"url\",\n        @\"HTMLURL\": @\"html_url\",\n        @\"reporterLogin\": @\"user.login\",\n        @\"assignee\": @\"assignee\",\n        @\"updatedAt\": @\"updated_at\"\n    };\n}\n\n+ (NSValueTransformer *)URLJSONTransformer {\n    return [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];\n}\n\n+ (NSValueTransformer *)HTMLURLJSONTransformer {\n    return [NSValueTransformer valueTransformerForName:MTLURLValueTransformerName];\n}\n\n+ (NSValueTransformer *)stateJSONTransformer {\n    return [NSValueTransformer mtl_valueMappingTransformerWithDictionary:@{\n        @\"open\": @(GHIssueStateOpen),\n        @\"closed\": @(GHIssueStateClosed)\n    }];\n}\n\n+ (NSValueTransformer *)assigneeJSONTransformer {\n    return [NSValueTransformer mtl_JSONDictionaryTransformerWithModelClass:GHUser.class];\n}\n\n+ (NSValueTransformer *)updatedAtJSONTransformer {\n    return [MTLValueTransformer reversibleTransformerWithForwardBlock:^(NSString *str) {\n        return [self.dateFormatter dateFromString:str];\n    } reverseBlock:^(NSDate *date) {\n        return [self.dateFormatter stringFromDate:date];\n    }];\n}\n\n- (instancetype)initWithDictionary:(NSDictionary *)dictionaryValue error:(NSError **)error {\n    self = [super initWithDictionary:dictionaryValue error:error];\n    if (self == nil) return nil;\n\n    // Store a value that needs to be determined locally upon initialization.\n    _retrievedAt = [NSDate date];\n\n    return self;\n}\n\n@end\n```\n\n除了 序列化 MTLModel 还免费提供了以下特性\n\n* hash \n* NSCoding\n* -isEqual:\n\n真的是非常贴心的工具。\n","slug":"use-mantle","updated":1414969886000,"excerpt":"","_id":"b7zoyxsthd96hu9n","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"XCode","_id":"v2ios7x8x4gpxzbc","posts":["ntaoe33ezgsp7tfd"]},{"name":"Swift ReactiveCocoa","_id":"tvrd3hprvc2vvx4b","posts":["vu1tzjzy4kk5aus8"]}]}